
Piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091a  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b6  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <hw_init_pins>:
#include "hw_pins.h"

void hw_init_pins(void) {
    /* Audio pin como salida, inicialmente en 0 (Timer2 aún NO configurado) */
    AUDIO_DDR  |=  (1<<AUDIO_PIN);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 60       	ori	r24, 0x08	; 8
  84:	84 b9       	out	0x04, r24	; 4
    AUDIO_PORT &= ~(1<<AUDIO_PIN);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	85 b9       	out	0x05, r24	; 5

    /* Notas: entradas con pull-up */
    NOTE_PORTC_DDR  &= ~NOTES_MASK_C;
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	80 7c       	andi	r24, 0xC0	; 192
  90:	87 b9       	out	0x07, r24	; 7
    NOTE_PORTC_PORT |=  NOTES_MASK_C;
  92:	88 b1       	in	r24, 0x08	; 8
  94:	8f 63       	ori	r24, 0x3F	; 63
  96:	88 b9       	out	0x08, r24	; 8

    NOTE_PORTD_DDR  &= ~NOTES_MASK_D;
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	83 70       	andi	r24, 0x03	; 3
  9c:	8a b9       	out	0x0a, r24	; 10
    NOTE_PORTD_PORT |=  NOTES_MASK_D;
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8c 6f       	ori	r24, 0xFC	; 252
  a2:	8b b9       	out	0x0b, r24	; 11

    /* Octava +/-: entradas con pull-up */
    OCT_DDR  &= ~OCT_MASK;
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	8c 7f       	andi	r24, 0xFC	; 252
  a8:	84 b9       	out	0x04, r24	; 4
    OCT_PORT |=  OCT_MASK;
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <hw_read_notes_raw>:
   ATENCIÓN: con pull-up, leeremos 1=libre, 0=presionado. */
uint16_t hw_read_notes_raw(void) {
    uint16_t bits = 0;

    /* PC0..PC5 -> bits 0..5 */
    uint8_t c = NOTE_PORTC_PIN & (uint8_t)NOTES_MASK_C;
  b2:	96 b1       	in	r25, 0x06	; 6
    bits |= (c & (1<<PC0)) ? (1<<0) : 0;
    bits |= (c & (1<<PC1)) ? (1<<1) : 0;
    bits |= (c & (1<<PC2)) ? (1<<2) : 0;
    bits |= (c & (1<<PC3)) ? (1<<3) : 0;
    bits |= (c & (1<<PC4)) ? (1<<4) : 0;
    bits |= (c & (1<<PC5)) ? (1<<5) : 0;
  b4:	29 2f       	mov	r18, r25
  b6:	21 70       	andi	r18, 0x01	; 1
  b8:	89 2f       	mov	r24, r25
  ba:	82 70       	andi	r24, 0x02	; 2
  bc:	82 2b       	or	r24, r18
  be:	29 2f       	mov	r18, r25
  c0:	24 70       	andi	r18, 0x04	; 4
  c2:	82 2b       	or	r24, r18
  c4:	29 2f       	mov	r18, r25
  c6:	28 70       	andi	r18, 0x08	; 8
  c8:	82 2b       	or	r24, r18
  ca:	29 2f       	mov	r18, r25
  cc:	20 71       	andi	r18, 0x10	; 16
  ce:	82 2b       	or	r24, r18
  d0:	90 72       	andi	r25, 0x20	; 32
  d2:	89 2b       	or	r24, r25
  d4:	90 e0       	ldi	r25, 0x00	; 0

    /* PD2..PD7 -> bits 6..11 */
    uint8_t d = NOTE_PORTD_PIN & (uint8_t)NOTES_MASK_D;
  d6:	29 b1       	in	r18, 0x09	; 9
  d8:	32 2f       	mov	r19, r18
  da:	3c 7f       	andi	r19, 0xFC	; 252
    bits |= (d & (1<<PD2)) ? (1<<6)  : 0;
  dc:	22 ff       	sbrs	r18, 2
  de:	03 c0       	rjmp	.+6      	; 0xe6 <hw_read_notes_raw+0x34>
  e0:	40 e4       	ldi	r20, 0x40	; 64
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <hw_read_notes_raw+0x38>
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	84 2b       	or	r24, r20
  ec:	95 2b       	or	r25, r21
    bits |= (d & (1<<PD3)) ? (1<<7)  : 0;
  ee:	23 ff       	sbrs	r18, 3
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <hw_read_notes_raw+0x46>
  f2:	40 e8       	ldi	r20, 0x80	; 128
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <hw_read_notes_raw+0x4a>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	84 2b       	or	r24, r20
  fe:	95 2b       	or	r25, r21
    bits |= (d & (1<<PD4)) ? (1<<8)  : 0;
 100:	24 ff       	sbrs	r18, 4
 102:	03 c0       	rjmp	.+6      	; 0x10a <hw_read_notes_raw+0x58>
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	51 e0       	ldi	r21, 0x01	; 1
 108:	02 c0       	rjmp	.+4      	; 0x10e <hw_read_notes_raw+0x5c>
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	84 2b       	or	r24, r20
 110:	95 2b       	or	r25, r21
    bits |= (d & (1<<PD5)) ? (1<<9)  : 0;
 112:	25 ff       	sbrs	r18, 5
 114:	03 c0       	rjmp	.+6      	; 0x11c <hw_read_notes_raw+0x6a>
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	52 e0       	ldi	r21, 0x02	; 2
 11a:	02 c0       	rjmp	.+4      	; 0x120 <hw_read_notes_raw+0x6e>
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	84 2b       	or	r24, r20
 122:	95 2b       	or	r25, r21
    bits |= (d & (1<<PD6)) ? (1<<10) : 0;
 124:	26 ff       	sbrs	r18, 6
 126:	03 c0       	rjmp	.+6      	; 0x12e <hw_read_notes_raw+0x7c>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	54 e0       	ldi	r21, 0x04	; 4
 12c:	02 c0       	rjmp	.+4      	; 0x132 <hw_read_notes_raw+0x80>
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	84 2b       	or	r24, r20
 134:	95 2b       	or	r25, r21
    bits |= (d & (1<<PD7)) ? (1<<11) : 0;
 136:	33 23       	and	r19, r19
 138:	1c f4       	brge	.+6      	; 0x140 <hw_read_notes_raw+0x8e>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	38 e0       	ldi	r19, 0x08	; 8
 13e:	02 c0       	rjmp	.+4      	; 0x144 <hw_read_notes_raw+0x92>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0

    return bits; /* 1=libre, 0=presionado (por pull-ups) */
}
 144:	82 2b       	or	r24, r18
 146:	93 2b       	or	r25, r19
 148:	08 95       	ret

0000014a <hw_read_oct_buttons>:

uint8_t hw_read_oct_buttons(void) {
    uint8_t p = OCT_PINR;
 14a:	93 b1       	in	r25, 0x03	; 3
    uint8_t out = 0;
    if (p & (1<<OCT_DOWN)) out |= (1<<0); // 1=libre
 14c:	90 fd       	sbrc	r25, 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <hw_read_oct_buttons+0xa>
    return bits; /* 1=libre, 0=presionado (por pull-ups) */
}

uint8_t hw_read_oct_buttons(void) {
    uint8_t p = OCT_PINR;
    uint8_t out = 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	01 c0       	rjmp	.+2      	; 0x156 <hw_read_oct_buttons+0xc>
    if (p & (1<<OCT_DOWN)) out |= (1<<0); // 1=libre
 154:	81 e0       	ldi	r24, 0x01	; 1
    if (p & (1<<OCT_UP))   out |= (1<<1); // 1=libre
 156:	91 fd       	sbrc	r25, 1
 158:	82 60       	ori	r24, 0x02	; 2
    return out; /* bit0=DOWN, bit1=UP (1=libre, 0=presionado) */
}
 15a:	08 95       	ret

0000015c <main>:

#include "hw_pins.h"
#include "sound.h"

int main(void) {
    hw_init_pins();
 15c:	0e 94 40 00 	call	0x80	; 0x80 <hw_init_pins>
    sound_init_idle();
 160:	0e 94 bd 00 	call	0x17a	; 0x17a <sound_init_idle>
       - Apretar cualquier tecla debería leer “0” en su bit correspondiente (por pull-up).
       - Todavía NO suena nada.
       - Podés poner breakpoints y mirar valores en “bits_capturados”.
    */
    while (1) {
        uint16_t notes = hw_read_notes_raw(); // 1=libre, 0=presionado
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <hw_read_notes_raw>
        uint8_t  oct   = hw_read_oct_buttons(); // 1=libre, 0=presionado
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <hw_read_oct_buttons>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e3       	ldi	r24, 0x3F	; 63
 16e:	9c e9       	ldi	r25, 0x9C	; 156
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x14>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x1a>
 176:	00 00       	nop
 178:	f5 cf       	rjmp	.-22     	; 0x164 <main+0x8>

0000017a <sound_init_idle>:
#include "hw_pins.h"
#include "sound.h"

void sound_init_idle(void) {
	/* Aseguramos pin en bajo y Timer2 detenido */
	TCCR2A = 0x00;
 17a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x00;
 17e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A  = 0;
 182:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	AUDIO_PORT &= ~(1<<AUDIO_PIN);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
