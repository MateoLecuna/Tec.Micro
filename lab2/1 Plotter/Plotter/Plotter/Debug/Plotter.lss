
Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  0080018a  0080018a  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c8c  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd4  00000000  00000000  000032d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000040ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6d  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005759  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_11>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_18>
  4c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_19>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	33 01       	movw	r6, r6
  6a:	36 01       	movw	r6, r12
  6c:	39 01       	movw	r6, r18
  6e:	3c 01       	movw	r6, r24
  70:	3f 01       	movw	r6, r30
  72:	42 01       	movw	r8, r4
  74:	45 01       	movw	r8, r10
  76:	57 01       	movw	r10, r14
  78:	57 01       	movw	r10, r14
  7a:	57 01       	movw	r10, r14
  7c:	57 01       	movw	r10, r14
  7e:	57 01       	movw	r10, r14
  80:	57 01       	movw	r10, r14
  82:	57 01       	movw	r10, r14
  84:	57 01       	movw	r10, r14
  86:	57 01       	movw	r10, r14
  88:	57 01       	movw	r10, r14
  8a:	57 01       	movw	r10, r14
  8c:	57 01       	movw	r10, r14
  8e:	57 01       	movw	r10, r14
  90:	57 01       	movw	r10, r14
  92:	57 01       	movw	r10, r14
  94:	57 01       	movw	r10, r14
  96:	57 01       	movw	r10, r14
  98:	57 01       	movw	r10, r14
  9a:	57 01       	movw	r10, r14
  9c:	57 01       	movw	r10, r14
  9e:	57 01       	movw	r10, r14
  a0:	57 01       	movw	r10, r14
  a2:	57 01       	movw	r10, r14
  a4:	57 01       	movw	r10, r14
  a6:	57 01       	movw	r10, r14
  a8:	57 01       	movw	r10, r14
  aa:	57 01       	movw	r10, r14
  ac:	57 01       	movw	r10, r14
  ae:	57 01       	movw	r10, r14
  b0:	48 01       	movw	r8, r16

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d8 e0       	ldi	r29, 0x08	; 8
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	e2 e5       	ldi	r30, 0x52	; 82
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 38       	cpi	r26, 0x8A	; 138
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	aa e8       	ldi	r26, 0x8A	; 138
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a2 35       	cpi	r26, 0x52	; 82
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  e8:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <do_nudge_up>:
#include "uart.h"
#include "scheduler.h"
#include "gpio.h"

// Pequeñas rutinas de movimiento (placeholder de figuras)
static void do_nudge_up(void){   pen_up();   sched_start(MV_UP,    250); }
  f0:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
  f4:	6a ef       	ldi	r22, 0xFA	; 250
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
  fe:	08 95       	ret

00000100 <do_nudge_down>:
static void do_nudge_down(void){ pen_up();   sched_start(MV_DOWN,  250); }
 100:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 104:	6a ef       	ldi	r22, 0xFA	; 250
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 10e:	08 95       	ret

00000110 <do_nudge_left>:
static void do_nudge_left(void){ pen_up();   sched_start(MV_LEFT,  250); }
 110:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 114:	6a ef       	ldi	r22, 0xFA	; 250
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 11e:	08 95       	ret

00000120 <do_nudge_right>:
static void do_nudge_right(void){pen_up();   sched_start(MV_RIGHT, 250); }
 120:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 124:	6a ef       	ldi	r22, 0xFA	; 250
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 12e:	08 95       	ret

00000130 <do_triangle_demo>:

// TODO: cuando tengamos draw_line/circle, acá llamamos a las figuras
static void do_triangle_demo(void){
	pen_down();
 130:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pen_down>
	// placeholder: tres lados simbólicos
	sched_start(MV_RIGHT, 600); while(sched_busy()){} // bloqueito breve: luego lo haremos por colas
 134:	68 e5       	ldi	r22, 0x58	; 88
 136:	72 e0       	ldi	r23, 0x02	; 2
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 13e:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 142:	81 11       	cpse	r24, r1
 144:	fc cf       	rjmp	.-8      	; 0x13e <do_triangle_demo+0xe>
	sched_start(MV_DIAG_UL, 600); while(sched_busy()){}
 146:	68 e5       	ldi	r22, 0x58	; 88
 148:	72 e0       	ldi	r23, 0x02	; 2
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 150:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 154:	81 11       	cpse	r24, r1
 156:	fc cf       	rjmp	.-8      	; 0x150 <do_triangle_demo+0x20>
	sched_start(MV_DOWN, 600); while(sched_busy()){}
 158:	68 e5       	ldi	r22, 0x58	; 88
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 162:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 166:	81 11       	cpse	r24, r1
 168:	fc cf       	rjmp	.-8      	; 0x162 <do_triangle_demo+0x32>
	pen_up();
 16a:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 16e:	08 95       	ret

00000170 <do_circle_demo>:
}
static void do_circle_demo(void){
	pen_down();
 170:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pen_down>
	// placeholder: “cuadrado redondo” en 4 diagonales
	sched_start(MV_DIAG_UR, 600); while(sched_busy()){}
 174:	68 e5       	ldi	r22, 0x58	; 88
 176:	72 e0       	ldi	r23, 0x02	; 2
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 17e:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 182:	81 11       	cpse	r24, r1
 184:	fc cf       	rjmp	.-8      	; 0x17e <do_circle_demo+0xe>
	sched_start(MV_DIAG_DR, 600); while(sched_busy()){}
 186:	68 e5       	ldi	r22, 0x58	; 88
 188:	72 e0       	ldi	r23, 0x02	; 2
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 190:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 194:	81 11       	cpse	r24, r1
 196:	fc cf       	rjmp	.-8      	; 0x190 <do_circle_demo+0x20>
	sched_start(MV_DIAG_DL, 600); while(sched_busy()){}
 198:	68 e5       	ldi	r22, 0x58	; 88
 19a:	72 e0       	ldi	r23, 0x02	; 2
 19c:	88 e0       	ldi	r24, 0x08	; 8
 19e:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 1a2:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 1a6:	81 11       	cpse	r24, r1
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <do_circle_demo+0x32>
	sched_start(MV_DIAG_UL, 600); while(sched_busy()){}
 1aa:	68 e5       	ldi	r22, 0x58	; 88
 1ac:	72 e0       	ldi	r23, 0x02	; 2
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 1b4:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 1b8:	81 11       	cpse	r24, r1
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <do_circle_demo+0x44>
	pen_up();
 1bc:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 1c0:	08 95       	ret

000001c2 <do_cross_demo>:
}
static void do_cross_demo(void){
	pen_down();
 1c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pen_down>
	sched_start(MV_UP, 700); while(sched_busy()){}
 1c6:	6c eb       	ldi	r22, 0xBC	; 188
 1c8:	72 e0       	ldi	r23, 0x02	; 2
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 1d0:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 1d4:	81 11       	cpse	r24, r1
 1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <do_cross_demo+0xe>
	sched_start(MV_DOWN, 1400); while(sched_busy()){}
 1d8:	68 e7       	ldi	r22, 0x78	; 120
 1da:	75 e0       	ldi	r23, 0x05	; 5
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 1e2:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 1e6:	81 11       	cpse	r24, r1
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <do_cross_demo+0x20>
	sched_start(MV_UP, 700); while(sched_busy()){}
 1ea:	6c eb       	ldi	r22, 0xBC	; 188
 1ec:	72 e0       	ldi	r23, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 1f4:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 1f8:	81 11       	cpse	r24, r1
 1fa:	fc cf       	rjmp	.-8      	; 0x1f4 <do_cross_demo+0x32>
	sched_start(MV_LEFT, 700); while(sched_busy()){}
 1fc:	6c eb       	ldi	r22, 0xBC	; 188
 1fe:	72 e0       	ldi	r23, 0x02	; 2
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 206:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 20a:	81 11       	cpse	r24, r1
 20c:	fc cf       	rjmp	.-8      	; 0x206 <do_cross_demo+0x44>
	sched_start(MV_RIGHT, 1400); while(sched_busy()){}
 20e:	68 e7       	ldi	r22, 0x78	; 120
 210:	75 e0       	ldi	r23, 0x05	; 5
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 218:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 21c:	81 11       	cpse	r24, r1
 21e:	fc cf       	rjmp	.-8      	; 0x218 <do_cross_demo+0x56>
	sched_start(MV_LEFT, 700); while(sched_busy()){}
 220:	6c eb       	ldi	r22, 0xBC	; 188
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 24 02 	call	0x448	; 0x448 <sched_start>
 22a:	0e 94 4b 02 	call	0x496	; 0x496 <sched_busy>
 22e:	81 11       	cpse	r24, r1
 230:	fc cf       	rjmp	.-8      	; 0x22a <do_cross_demo+0x68>
	pen_up();
 232:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 236:	08 95       	ret

00000238 <commands_init>:
}

void commands_init(void){
	uart_print("\r\n=== Plotter Ready ===\r\n");
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 1d 03 	call	0x63a	; 0x63a <uart_print>
	uart_print("[0] Arriba  [1] Abajo  [2] Izq  [3] Der\r\n");
 240:	8a e1       	ldi	r24, 0x1A	; 26
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 1d 03 	call	0x63a	; 0x63a <uart_print>
	uart_print("[4] Triangulo  [5] Circulo  [6] Cruz  [T] Todo\r\n\r\n");
 248:	84 e4       	ldi	r24, 0x44	; 68
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 1d 03 	call	0x63a	; 0x63a <uart_print>
 250:	08 95       	ret

00000252 <commands_process_byte>:
}

void commands_process_byte(uint8_t b){
	switch(b){
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	f0 97       	sbiw	r30, 0x30	; 48
 258:	e5 32       	cpi	r30, 0x25	; 37
 25a:	f1 05       	cpc	r31, r1
 25c:	40 f5       	brcc	.+80     	; 0x2ae <commands_process_byte+0x5c>
 25e:	ec 5c       	subi	r30, 0xCC	; 204
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	0c 94 a1 03 	jmp	0x742	; 0x742 <__tablejump2__>
		case '0': do_nudge_up();    break;
 266:	0e 94 78 00 	call	0xf0	; 0xf0 <do_nudge_up>
 26a:	08 95       	ret
		case '1': do_nudge_down();  break;
 26c:	0e 94 80 00 	call	0x100	; 0x100 <do_nudge_down>
 270:	08 95       	ret
		case '2': do_nudge_left();  break;
 272:	0e 94 88 00 	call	0x110	; 0x110 <do_nudge_left>
 276:	08 95       	ret
		case '3': do_nudge_right(); break;
 278:	0e 94 90 00 	call	0x120	; 0x120 <do_nudge_right>
 27c:	08 95       	ret
		case '4': do_triangle_demo(); break;   // luego: draw_triangle()
 27e:	0e 94 98 00 	call	0x130	; 0x130 <do_triangle_demo>
 282:	08 95       	ret
		case '5': do_circle_demo();   break;   // luego: draw_circle()
 284:	0e 94 b8 00 	call	0x170	; 0x170 <do_circle_demo>
 288:	08 95       	ret
		case '6': do_cross_demo();    break;   // luego: draw_cross()
 28a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <do_cross_demo>
 28e:	08 95       	ret
		case 'T':
		do_triangle_demo();
 290:	0e 94 98 00 	call	0x130	; 0x130 <do_triangle_demo>
		do_nudge_right(); do_nudge_right();
 294:	0e 94 90 00 	call	0x120	; 0x120 <do_nudge_right>
 298:	0e 94 90 00 	call	0x120	; 0x120 <do_nudge_right>
		do_circle_demo();
 29c:	0e 94 b8 00 	call	0x170	; 0x170 <do_circle_demo>
		do_nudge_right(); do_nudge_right();
 2a0:	0e 94 90 00 	call	0x120	; 0x120 <do_nudge_right>
 2a4:	0e 94 90 00 	call	0x120	; 0x120 <do_nudge_right>
		do_cross_demo();
 2a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <do_cross_demo>
		break;
 2ac:	08 95       	ret
		default:
		uart_print("Opcion invalida!\r\n");
 2ae:	87 e7       	ldi	r24, 0x77	; 119
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 1d 03 	call	0x63a	; 0x63a <uart_print>
		commands_init();
 2b6:	0e 94 1c 01 	call	0x238	; 0x238 <commands_init>
 2ba:	08 95       	ret

000002bc <commands_poll>:
		break;
	}
}

void commands_poll(void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	1f 92       	push	r1
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t b;
	// Despachador no bloqueante: lee lo que haya en RX y procesa
	while (uart_rx_dequeue(&b)){
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <commands_poll+0x12>
		commands_process_byte(b);
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	0e 94 29 01 	call	0x252	; 0x252 <commands_process_byte>
}

void commands_poll(void){
	uint8_t b;
	// Despachador no bloqueante: lee lo que haya en RX y procesa
	while (uart_rx_dequeue(&b)){
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	0e 94 05 03 	call	0x60a	; 0x60a <uart_rx_dequeue>
 2d6:	81 11       	cpse	r24, r1
 2d8:	f7 cf       	rjmp	.-18     	; 0x2c8 <commands_poll+0xc>
		commands_process_byte(b);
	}
}
 2da:	0f 90       	pop	r0
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <draw_init>:

static int16_t cur_x=0, cur_y=0;

void draw_init(void){
	cur_x = 0; cur_y = 0;
	pen_up();
 2e2:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 2e6:	08 95       	ret

000002e8 <gpio_init>:
static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }

void gpio_init(void) {
	// PD2..PD7 salidas
	DDRD |= (1<<PIN_SOL_DOWN) | (1<<PIN_SOL_UP) |
 2e8:	8a b1       	in	r24, 0x0a	; 10
 2ea:	8c 6f       	ori	r24, 0xFC	; 252
 2ec:	8a b9       	out	0x0a, r24	; 10
	(1<<PIN_MOVE_D)  | (1<<PIN_MOVE_U) |
	(1<<PIN_MOVE_R)  | (1<<PIN_MOVE_L);

	// Arranque seguro
	PORTD &= ~((1<<PIN_SOL_DOWN)|(1<<PIN_SOL_UP)|
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	83 70       	andi	r24, 0x03	; 3
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	08 95       	ret

000002f6 <pen_down>:
	(1<<PIN_MOVE_D)|(1<<PIN_MOVE_U)|
	(1<<PIN_MOVE_R)|(1<<PIN_MOVE_L));
}

void pen_down(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2f6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f8:	f8 94       	cli
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <pen_down+0x16>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 2fe:	8b b1       	in	r24, 0x0b	; 11
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	8b b9       	out	0x0b, r24	; 11
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	84 60       	ori	r24, 0x04	; 4
 308:	8b b9       	out	0x0b, r24	; 11
	(1<<PIN_MOVE_D)|(1<<PIN_MOVE_U)|
	(1<<PIN_MOVE_R)|(1<<PIN_MOVE_L));
}

void pen_down(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	81 11       	cpse	r24, r1
 30e:	f7 cf       	rjmp	.-18     	; 0x2fe <pen_down+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 310:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 312:	08 95       	ret

00000314 <pen_up>:
		set_bit(&PORTD, PIN_SOL_DOWN);
	}
}

void pen_up(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 314:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 316:	f8 94       	cli
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	07 c0       	rjmp	.+14     	; 0x32a <pen_up+0x16>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	8b 7f       	andi	r24, 0xFB	; 251
 320:	8b b9       	out	0x0b, r24	; 11
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	88 60       	ori	r24, 0x08	; 8
 326:	8b b9       	out	0x0b, r24	; 11
		set_bit(&PORTD, PIN_SOL_DOWN);
	}
}

void pen_up(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	81 11       	cpse	r24, r1
 32c:	f7 cf       	rjmp	.-18     	; 0x31c <pen_up+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 32e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 330:	08 95       	ret

00000332 <move_none>:
		set_bit(&PORTD, PIN_SOL_UP);
	}
}

void move_none(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 332:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 334:	f8 94       	cli
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0d c0       	rjmp	.+26     	; 0x354 <move_none+0x22>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	8f 7e       	andi	r24, 0xEF	; 239
 344:	8b b9       	out	0x0b, r24	; 11
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	8f 77       	andi	r24, 0x7F	; 127
 34a:	8b b9       	out	0x0b, r24	; 11
 34c:	8b b1       	in	r24, 0x0b	; 11
 34e:	8f 7b       	andi	r24, 0xBF	; 191
 350:	8b b9       	out	0x0b, r24	; 11
		set_bit(&PORTD, PIN_SOL_UP);
	}
}

void move_none(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	81 11       	cpse	r24, r1
 356:	f1 cf       	rjmp	.-30     	; 0x33a <move_none+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 358:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 35a:	08 95       	ret

0000035c <move_up>:
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_up(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 35c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 35e:	f8 94       	cli
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0d c0       	rjmp	.+26     	; 0x37e <move_up+0x22>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 364:	8b b1       	in	r24, 0x0b	; 11
 366:	80 62       	ori	r24, 0x20	; 32
 368:	8b b9       	out	0x0b, r24	; 11
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8f 7e       	andi	r24, 0xEF	; 239
 36e:	8b b9       	out	0x0b, r24	; 11
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	8f 77       	andi	r24, 0x7F	; 127
 374:	8b b9       	out	0x0b, r24	; 11
 376:	8b b1       	in	r24, 0x0b	; 11
 378:	8f 7b       	andi	r24, 0xBF	; 191
 37a:	8b b9       	out	0x0b, r24	; 11
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_up(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	81 11       	cpse	r24, r1
 380:	f1 cf       	rjmp	.-30     	; 0x364 <move_up+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 382:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 384:	08 95       	ret

00000386 <move_down>:
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_down(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 386:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 388:	f8 94       	cli
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <move_down+0x22>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 38e:	8b b1       	in	r24, 0x0b	; 11
 390:	80 61       	ori	r24, 0x10	; 16
 392:	8b b9       	out	0x0b, r24	; 11
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 394:	8b b1       	in	r24, 0x0b	; 11
 396:	8f 7d       	andi	r24, 0xDF	; 223
 398:	8b b9       	out	0x0b, r24	; 11
 39a:	8b b1       	in	r24, 0x0b	; 11
 39c:	8f 77       	andi	r24, 0x7F	; 127
 39e:	8b b9       	out	0x0b, r24	; 11
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	8f 7b       	andi	r24, 0xBF	; 191
 3a4:	8b b9       	out	0x0b, r24	; 11
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_down(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	81 11       	cpse	r24, r1
 3aa:	f1 cf       	rjmp	.-30     	; 0x38e <move_down+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3ac:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 3ae:	08 95       	ret

000003b0 <move_left>:
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_left(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3b0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3b2:	f8 94       	cli
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0d c0       	rjmp	.+26     	; 0x3d2 <move_left+0x22>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	8b b9       	out	0x0b, r24	; 11
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 3be:	8b b1       	in	r24, 0x0b	; 11
 3c0:	8f 7b       	andi	r24, 0xBF	; 191
 3c2:	8b b9       	out	0x0b, r24	; 11
 3c4:	8b b1       	in	r24, 0x0b	; 11
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	8b b9       	out	0x0b, r24	; 11
 3ca:	8b b1       	in	r24, 0x0b	; 11
 3cc:	8f 7e       	andi	r24, 0xEF	; 239
 3ce:	8b b9       	out	0x0b, r24	; 11
		clr_bit(&PORTD, PIN_MOVE_R);
	}
}

void move_left(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	81 11       	cpse	r24, r1
 3d4:	f1 cf       	rjmp	.-30     	; 0x3b8 <move_left+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3d6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 3d8:	08 95       	ret

000003da <move_right>:
		clr_bit(&PORTD, PIN_MOVE_D);
	}
}

void move_right(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3dc:	f8 94       	cli
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <move_right+0x22>
#include "gpio.h"
#include "config.h"
#include <util/atomic.h>

static inline void set_bit(volatile uint8_t* port, uint8_t bit){ *port |=  (1<<bit); }
 3e2:	8b b1       	in	r24, 0x0b	; 11
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	8b b9       	out	0x0b, r24	; 11
static inline void clr_bit(volatile uint8_t* port, uint8_t bit){ *port &= ~(1<<bit); }
 3e8:	8b b1       	in	r24, 0x0b	; 11
 3ea:	8f 77       	andi	r24, 0x7F	; 127
 3ec:	8b b9       	out	0x0b, r24	; 11
 3ee:	8b b1       	in	r24, 0x0b	; 11
 3f0:	8f 7d       	andi	r24, 0xDF	; 223
 3f2:	8b b9       	out	0x0b, r24	; 11
 3f4:	8b b1       	in	r24, 0x0b	; 11
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	8b b9       	out	0x0b, r24	; 11
		clr_bit(&PORTD, PIN_MOVE_D);
	}
}

void move_right(void) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	81 11       	cpse	r24, r1
 3fe:	f1 cf       	rjmp	.-30     	; 0x3e2 <move_right+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 400:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 402:	08 95       	ret

00000404 <tick_1ms_isr_hook>:
#include "scheduler.h"
#include "commands.h"
#include "draw.h"

void tick_1ms_isr_hook(void){
	sched_tick_isr();
 404:	0e 94 54 02 	call	0x4a8	; 0x4a8 <sched_tick_isr>
 408:	08 95       	ret

0000040a <main>:
}

int main(void){
	gpio_init();
 40a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <gpio_init>
	uart_init(UART_BAUD);
 40e:	60 e8       	ldi	r22, 0x80	; 128
 410:	75 e2       	ldi	r23, 0x25	; 37
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uart_init>
	timer1_init_ctc_1khz();
 41a:	0e 94 a0 02 	call	0x540	; 0x540 <timer1_init_ctc_1khz>
	sched_init();
 41e:	0e 94 19 02 	call	0x432	; 0x432 <sched_init>
	draw_init();
 422:	0e 94 71 01 	call	0x2e2	; 0x2e2 <draw_init>

	sei();
 426:	78 94       	sei

	commands_init();
 428:	0e 94 1c 01 	call	0x238	; 0x238 <commands_init>

	for(;;){
		// Poll de comandos por UART (no bloquea)
		commands_poll();
 42c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <commands_poll>
 430:	fd cf       	rjmp	.-6      	; 0x42c <main+0x22>

00000432 <sched_init>:
}

void sched_stop(void){
	ticks_left = 0;
	current = MV_NONE;
	move_none();
 432:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <ticks_left+0x1>
 436:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <ticks_left>
 43a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <current>
 43e:	0e 94 99 01 	call	0x332	; 0x332 <move_none>
 442:	0e 94 8a 01 	call	0x314	; 0x314 <pen_up>
 446:	08 95       	ret

00000448 <sched_start>:
 448:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <current>
 44c:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <ticks_left+0x1>
 450:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <ticks_left>
 454:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
 458:	83 30       	cpi	r24, 0x03	; 3
 45a:	89 f0       	breq	.+34     	; 0x47e <sched_start+0x36>
 45c:	28 f4       	brcc	.+10     	; 0x468 <sched_start+0x20>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	41 f0       	breq	.+16     	; 0x472 <sched_start+0x2a>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	49 f0       	breq	.+18     	; 0x478 <sched_start+0x30>
 466:	14 c0       	rjmp	.+40     	; 0x490 <sched_start+0x48>
 468:	84 30       	cpi	r24, 0x04	; 4
 46a:	61 f0       	breq	.+24     	; 0x484 <sched_start+0x3c>
 46c:	89 30       	cpi	r24, 0x09	; 9
 46e:	68 f0       	brcs	.+26     	; 0x48a <sched_start+0x42>
 470:	0f c0       	rjmp	.+30     	; 0x490 <sched_start+0x48>
 472:	0e 94 ae 01 	call	0x35c	; 0x35c <move_up>
 476:	08 95       	ret
 478:	0e 94 c3 01 	call	0x386	; 0x386 <move_down>
 47c:	08 95       	ret
 47e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <move_left>
 482:	08 95       	ret
 484:	0e 94 ed 01 	call	0x3da	; 0x3da <move_right>
 488:	08 95       	ret
 48a:	0e 94 99 01 	call	0x332	; 0x332 <move_none>
 48e:	08 95       	ret
 490:	0e 94 99 01 	call	0x332	; 0x332 <move_none>
 494:	08 95       	ret

00000496 <sched_busy>:
 496:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <ticks_left>
 49a:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <ticks_left+0x1>
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	23 2b       	or	r18, r19
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <sched_busy+0x10>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <sched_tick_isr>:
}

void sched_tick_isr(void){
	if (!ticks_left) return;
 4a8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <ticks_left>
 4ac:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <ticks_left+0x1>
 4b0:	89 2b       	or	r24, r25
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <sched_tick_isr+0xe>
 4b4:	44 c0       	rjmp	.+136    	; 0x53e <sched_tick_isr+0x96>

	// Manejo diagonal alternado: eje X e Y en t alternos
	if (current==MV_DIAG_UR || current==MV_DIAG_UL ||
 4b6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 4ba:	85 30       	cpi	r24, 0x05	; 5
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <sched_tick_isr+0x2e>
 4be:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 4c2:	86 30       	cpi	r24, 0x06	; 6
 4c4:	41 f0       	breq	.+16     	; 0x4d6 <sched_tick_isr+0x2e>
	current==MV_DIAG_DR || current==MV_DIAG_DL){
 4c6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>

void sched_tick_isr(void){
	if (!ticks_left) return;

	// Manejo diagonal alternado: eje X e Y en t alternos
	if (current==MV_DIAG_UR || current==MV_DIAG_UL ||
 4ca:	87 30       	cpi	r24, 0x07	; 7
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <sched_tick_isr+0x2e>
	current==MV_DIAG_DR || current==MV_DIAG_DL){
 4ce:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	29 f5       	brne	.+74     	; 0x520 <sched_tick_isr+0x78>
		diag_phase ^= 1;
 4d6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <__data_end>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	89 27       	eor	r24, r25
 4de:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
		if (diag_phase==0){
 4e2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 4e6:	81 11       	cpse	r24, r1
 4e8:	0e c0       	rjmp	.+28     	; 0x506 <sched_tick_isr+0x5e>
			// eje X
			if (current==MV_DIAG_UR || current==MV_DIAG_DR) move_right();
 4ea:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 4ee:	85 30       	cpi	r24, 0x05	; 5
 4f0:	21 f0       	breq	.+8      	; 0x4fa <sched_tick_isr+0x52>
 4f2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 4f6:	87 30       	cpi	r24, 0x07	; 7
 4f8:	19 f4       	brne	.+6      	; 0x500 <sched_tick_isr+0x58>
 4fa:	0e 94 ed 01 	call	0x3da	; 0x3da <move_right>
 4fe:	10 c0       	rjmp	.+32     	; 0x520 <sched_tick_isr+0x78>
			else move_left();
 500:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <move_left>
 504:	0d c0       	rjmp	.+26     	; 0x520 <sched_tick_isr+0x78>
			}else{
			// eje Y
			if (current==MV_DIAG_UR || current==MV_DIAG_UL) move_up();
 506:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 50a:	85 30       	cpi	r24, 0x05	; 5
 50c:	21 f0       	breq	.+8      	; 0x516 <sched_tick_isr+0x6e>
 50e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <current>
 512:	86 30       	cpi	r24, 0x06	; 6
 514:	19 f4       	brne	.+6      	; 0x51c <sched_tick_isr+0x74>
 516:	0e 94 ae 01 	call	0x35c	; 0x35c <move_up>
 51a:	02 c0       	rjmp	.+4      	; 0x520 <sched_tick_isr+0x78>
			else move_down();
 51c:	0e 94 c3 01 	call	0x386	; 0x386 <move_down>
		}
	}

	if (--ticks_left == 0){
 520:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <ticks_left>
 524:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <ticks_left+0x1>
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <ticks_left+0x1>
 52e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <ticks_left>
 532:	89 2b       	or	r24, r25
 534:	21 f4       	brne	.+8      	; 0x53e <sched_tick_isr+0x96>
		move_none();
 536:	0e 94 99 01 	call	0x332	; 0x332 <move_none>
		current = MV_NONE;
 53a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <current>
 53e:	08 95       	ret

00000540 <timer1_init_ctc_1khz>:

void timer1_init_ctc_1khz(void){
	// Prescaler 64, OCR1A para 1kHz
	// tick = (64 / 16MHz) = 4 us
	// 1ms / 4us = 250 -> OCR1A = 249
	TCCR1A = 0;
 540:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12);           // CTC
 544:	e1 e8       	ldi	r30, 0x81	; 129
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	80 83       	st	Z, r24
	OCR1A  = (uint16_t)((F_CPU / 64 / TICK_HZ) - 1); // 249 para 1kHz
 54c:	89 ef       	ldi	r24, 0xF9	; 249
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 554:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1<<OCIE1A);
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B |= (1<<CS11) | (1<<CS10); // prescaler 64
 55e:	80 81       	ld	r24, Z
 560:	83 60       	ori	r24, 0x03	; 3
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	tick_1ms_isr_hook();
 588:	0e 94 02 02 	call	0x404	; 0x404 <tick_1ms_isr_hook>
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <uart_init>:
static volatile uint8_t tx_buf[TX_BUF_SIZE];
static volatile uint8_t rx_buf[RX_BUF_SIZE];
static volatile uint8_t tx_head=0, tx_tail=0;
static volatile uint8_t rx_head=0, rx_tail=0;

void uart_init(uint32_t baud){
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
	uint16_t ubrr = (F_CPU/16/baud) - 1;
 5b2:	60 e4       	ldi	r22, 0x40	; 64
 5b4:	72 e4       	ldi	r23, 0x42	; 66
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__udivmodsi4>
 5be:	21 50       	subi	r18, 0x01	; 1
 5c0:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(ubrr>>8);
 5c2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr);
 5c6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 5ca:	88 e9       	ldi	r24, 0x98	; 152
 5cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // 8N1
 5d0:	86 e0       	ldi	r24, 0x06	; 6
 5d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5d6:	08 95       	ret

000005d8 <uart_tx_enqueue>:
}

bool uart_tx_enqueue(uint8_t b){
	uint8_t next = (tx_head + 1) & TX_MASK;
 5d8:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tx_head>
 5dc:	9f 5f       	subi	r25, 0xFF	; 255
 5de:	9f 77       	andi	r25, 0x7F	; 127
	if (next == tx_tail) return false; // full
 5e0:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <tx_tail>
 5e4:	92 17       	cp	r25, r18
 5e6:	79 f0       	breq	.+30     	; 0x606 <uart_tx_enqueue+0x2e>
	tx_buf[tx_head] = b;
 5e8:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <tx_head>
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 52       	subi	r30, 0x2E	; 46
 5f0:	fe 4f       	sbci	r31, 0xFE	; 254
 5f2:	80 83       	st	Z, r24
	tx_head = next;
 5f4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <tx_head>
	UCSR0B |= (1<<UDRIE0); // habilita ISR UDRE
 5f8:	e1 ec       	ldi	r30, 0xC1	; 193
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	80 62       	ori	r24, 0x20	; 32
 600:	80 83       	st	Z, r24
	return true;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // 8N1
}

bool uart_tx_enqueue(uint8_t b){
	uint8_t next = (tx_head + 1) & TX_MASK;
	if (next == tx_tail) return false; // full
 606:	80 e0       	ldi	r24, 0x00	; 0
	tx_buf[tx_head] = b;
	tx_head = next;
	UCSR0B |= (1<<UDRIE0); // habilita ISR UDRE
	return true;
}
 608:	08 95       	ret

0000060a <uart_rx_dequeue>:

bool uart_rx_dequeue(uint8_t* b){
 60a:	dc 01       	movw	r26, r24
	if (rx_head == rx_tail) return false; // vacío
 60c:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <rx_head>
 610:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_tail>
 614:	29 17       	cp	r18, r25
 616:	79 f0       	breq	.+30     	; 0x636 <uart_rx_dequeue+0x2c>
	*b = rx_buf[rx_tail];
 618:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <rx_tail>
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	ee 56       	subi	r30, 0x6E	; 110
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	80 81       	ld	r24, Z
 624:	8c 93       	st	X, r24
	rx_tail = (rx_tail + 1) & RX_MASK;
 626:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rx_tail>
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	8f 73       	andi	r24, 0x3F	; 63
 62e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <rx_tail>
	return true;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	08 95       	ret
	UCSR0B |= (1<<UDRIE0); // habilita ISR UDRE
	return true;
}

bool uart_rx_dequeue(uint8_t* b){
	if (rx_head == rx_tail) return false; // vacío
 636:	80 e0       	ldi	r24, 0x00	; 0
	*b = rx_buf[rx_tail];
	rx_tail = (rx_tail + 1) & RX_MASK;
	return true;
}
 638:	08 95       	ret

0000063a <uart_print>:

void uart_print(const char* s){
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
	while(*s){
 640:	06 c0       	rjmp	.+12     	; 0x64e <uart_print+0x14>
		while(!uart_tx_enqueue((uint8_t)*s)) { /* esperar espacio */ }
 642:	88 81       	ld	r24, Y
 644:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <uart_tx_enqueue>
 648:	88 23       	and	r24, r24
 64a:	d9 f3       	breq	.-10     	; 0x642 <uart_print+0x8>
		s++;
 64c:	21 96       	adiw	r28, 0x01	; 1
	rx_tail = (rx_tail + 1) & RX_MASK;
	return true;
}

void uart_print(const char* s){
	while(*s){
 64e:	88 81       	ld	r24, Y
 650:	81 11       	cpse	r24, r1
 652:	f7 cf       	rjmp	.-18     	; 0x642 <uart_print+0x8>
		while(!uart_tx_enqueue((uint8_t)*s)) { /* esperar espacio */ }
		s++;
	}
}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <__vector_18>:

ISR(USART_RX_vect){
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	2f 93       	push	r18
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
	uint8_t d = UDR0;
 66e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	uint8_t next = (rx_head + 1) & RX_MASK;
 672:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <rx_head>
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	8f 73       	andi	r24, 0x3F	; 63
	if (next != rx_tail) { rx_buf[rx_head] = d; rx_head = next; }
 67a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <rx_tail>
 67e:	89 17       	cp	r24, r25
 680:	41 f0       	breq	.+16     	; 0x692 <__vector_18+0x38>
 682:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <rx_head>
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	ee 56       	subi	r30, 0x6E	; 110
 68a:	fe 4f       	sbci	r31, 0xFE	; 254
 68c:	20 83       	st	Z, r18
 68e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <rx_head>
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <__vector_19>:

ISR(USART_UDRE_vect){
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	if (tx_head == tx_tail){
 6b8:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <tx_head>
 6bc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tx_tail>
 6c0:	98 13       	cpse	r25, r24
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <__vector_19+0x2a>
		UCSR0B &= ~(1<<UDRIE0); // buffer vacío
 6c4:	e1 ec       	ldi	r30, 0xC1	; 193
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	8f 7d       	andi	r24, 0xDF	; 223
 6cc:	80 83       	st	Z, r24
		return;
 6ce:	0e c0       	rjmp	.+28     	; 0x6ec <__vector_19+0x46>
	}
	UDR0 = tx_buf[tx_tail];
 6d0:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <tx_tail>
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	ee 52       	subi	r30, 0x2E	; 46
 6d8:	fe 4f       	sbci	r31, 0xFE	; 254
 6da:	80 81       	ld	r24, Z
 6dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	tx_tail = (tx_tail + 1) & TX_MASK;
 6e0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <tx_tail>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	8f 77       	andi	r24, 0x7F	; 127
 6e8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <tx_tail>
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <__udivmodsi4>:
 6fe:	a1 e2       	ldi	r26, 0x21	; 33
 700:	1a 2e       	mov	r1, r26
 702:	aa 1b       	sub	r26, r26
 704:	bb 1b       	sub	r27, r27
 706:	fd 01       	movw	r30, r26
 708:	0d c0       	rjmp	.+26     	; 0x724 <__udivmodsi4_ep>

0000070a <__udivmodsi4_loop>:
 70a:	aa 1f       	adc	r26, r26
 70c:	bb 1f       	adc	r27, r27
 70e:	ee 1f       	adc	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	a2 17       	cp	r26, r18
 714:	b3 07       	cpc	r27, r19
 716:	e4 07       	cpc	r30, r20
 718:	f5 07       	cpc	r31, r21
 71a:	20 f0       	brcs	.+8      	; 0x724 <__udivmodsi4_ep>
 71c:	a2 1b       	sub	r26, r18
 71e:	b3 0b       	sbc	r27, r19
 720:	e4 0b       	sbc	r30, r20
 722:	f5 0b       	sbc	r31, r21

00000724 <__udivmodsi4_ep>:
 724:	66 1f       	adc	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	1a 94       	dec	r1
 72e:	69 f7       	brne	.-38     	; 0x70a <__udivmodsi4_loop>
 730:	60 95       	com	r22
 732:	70 95       	com	r23
 734:	80 95       	com	r24
 736:	90 95       	com	r25
 738:	9b 01       	movw	r18, r22
 73a:	ac 01       	movw	r20, r24
 73c:	bd 01       	movw	r22, r26
 73e:	cf 01       	movw	r24, r30
 740:	08 95       	ret

00000742 <__tablejump2__>:
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	05 90       	lpm	r0, Z+
 748:	f4 91       	lpm	r31, Z
 74a:	e0 2d       	mov	r30, r0
 74c:	09 94       	ijmp

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
