
Control de Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002a8  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7c  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000392  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026d  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  8e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init_baud>:
#include <stdlib.h>

/* ==== UART ==== */
#define BAUD 115200
static void uart_init_baud(void) {
	UCSR0A = (1 << U2X0);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	uint16_t ubrr = (uint16_t)(F_CPU / (8UL * BAUD) - 1UL);
	UBRR0H = (uint8_t)(ubrr >> 8);
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr & 0xFF);
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b2:	08 95       	ret

000000b4 <uart_putc>:
}
static void uart_putc(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c; }
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putc>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <uart_print>:
static void uart_print(const char *s){ while(*s) uart_putc(*s++); }
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <uart_print+0xe>
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
  d0:	88 81       	ld	r24, Y
  d2:	81 11       	cpse	r24, r1
  d4:	fa cf       	rjmp	.-12     	; 0xca <uart_print+0x8>
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <adc_init>:
static void uart_print_int(int v){ char b[12]; itoa(v,b,10); uart_print(b); }

/* ==== ADC ==== */
static void adc_init(void){
	ADMUX  = (1 << REFS0);                 // AVcc
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // presc=64
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	08 95       	ret

000000ea <adc_read>:
}
static uint16_t adc_read(uint8_t ch){
	ADMUX = (ADMUX & 0xF0) | (ch & 0x0F);
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	89 2b       	or	r24, r25
  f6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	86 fd       	sbrc	r24, 6
 108:	fc cf       	rjmp	.-8      	; 0x102 <adc_read+0x18>
	return ADC; // 10 bits
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 112:	08 95       	ret

00000114 <adc_read_avg>:
static uint16_t adc_read_avg(uint8_t ch, uint8_t n){
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	18 2f       	mov	r17, r24
 124:	d6 2f       	mov	r29, r22
	uint32_t acc=0; for(uint8_t i=0;i<n;i++) acc+=adc_read(ch);
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	c1 2c       	mov	r12, r1
 12a:	d1 2c       	mov	r13, r1
 12c:	76 01       	movw	r14, r12
 12e:	08 c0       	rjmp	.+16     	; 0x140 <adc_read_avg+0x2c>
 130:	81 2f       	mov	r24, r17
 132:	0e 94 75 00 	call	0xea	; 0xea <adc_read>
 136:	c8 0e       	add	r12, r24
 138:	d9 1e       	adc	r13, r25
 13a:	e1 1c       	adc	r14, r1
 13c:	f1 1c       	adc	r15, r1
 13e:	cf 5f       	subi	r28, 0xFF	; 255
 140:	cd 17       	cp	r28, r29
 142:	b0 f3       	brcs	.-20     	; 0x130 <adc_read_avg+0x1c>
	return (uint16_t)(acc/n);
 144:	2d 2f       	mov	r18, r29
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	c7 01       	movw	r24, r14
 14e:	b6 01       	movw	r22, r12
 150:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__udivmodsi4>
}
 154:	c9 01       	movw	r24, r18
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	08 95       	ret

00000166 <uart_print_int>:
	UCSR0B = (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}
static void uart_putc(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c; }
static void uart_print(const char *s){ while(*s) uart_putc(*s++); }
static void uart_print_int(int v){ char b[12]; itoa(v,b,10); uart_print(b); }
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	2c 97       	sbiw	r28, 0x0c	; 12
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 17a:	4a e0       	ldi	r20, 0x0A	; 10
 17c:	be 01       	movw	r22, r28
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	0e 94 1d 01 	call	0x23a	; 0x23a <__itoa_ncheck>
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
 18e:	2c 96       	adiw	r28, 0x0c	; 12
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <main>:
/* ==== Config ==== */
#define TS_MS     20
#define ADC_AVG_N 4

int main(void){
	uart_init_baud();
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init_baud>
	adc_init();
 1a4:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_init>
	uart_print("P3C,ref(A0),act(A1)\r\n");
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
	while(1){
		uint16_t ref = adc_read_avg(0, ADC_AVG_N);
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 8a 00 	call	0x114	; 0x114 <adc_read_avg>
 1b8:	8c 01       	movw	r16, r24
		uint16_t act = adc_read_avg(1, ADC_AVG_N);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 8a 00 	call	0x114	; 0x114 <adc_read_avg>
 1c2:	ec 01       	movw	r28, r24
		uart_print_int(ref); uart_putc(',');
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 b3 00 	call	0x166	; 0x166 <uart_print_int>
 1ca:	8c e2       	ldi	r24, 0x2C	; 44
 1cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
		uart_print_int(act); uart_putc('\r'); uart_putc('\n');
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 b3 00 	call	0x166	; 0x166 <uart_print_int>
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	89 ef       	ldi	r24, 0xF9	; 249
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x48>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x52>
 1f2:	00 00       	nop
 1f4:	dd cf       	rjmp	.-70     	; 0x1b0 <main+0x10>

000001f6 <__udivmodsi4>:
 1f6:	a1 e2       	ldi	r26, 0x21	; 33
 1f8:	1a 2e       	mov	r1, r26
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	fd 01       	movw	r30, r26
 200:	0d c0       	rjmp	.+26     	; 0x21c <__udivmodsi4_ep>

00000202 <__udivmodsi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	ee 1f       	adc	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	a2 17       	cp	r26, r18
 20c:	b3 07       	cpc	r27, r19
 20e:	e4 07       	cpc	r30, r20
 210:	f5 07       	cpc	r31, r21
 212:	20 f0       	brcs	.+8      	; 0x21c <__udivmodsi4_ep>
 214:	a2 1b       	sub	r26, r18
 216:	b3 0b       	sbc	r27, r19
 218:	e4 0b       	sbc	r30, r20
 21a:	f5 0b       	sbc	r31, r21

0000021c <__udivmodsi4_ep>:
 21c:	66 1f       	adc	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	1a 94       	dec	r1
 226:	69 f7       	brne	.-38     	; 0x202 <__udivmodsi4_loop>
 228:	60 95       	com	r22
 22a:	70 95       	com	r23
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	bd 01       	movw	r22, r26
 236:	cf 01       	movw	r24, r30
 238:	08 95       	ret

0000023a <__itoa_ncheck>:
 23a:	bb 27       	eor	r27, r27
 23c:	4a 30       	cpi	r20, 0x0A	; 10
 23e:	31 f4       	brne	.+12     	; 0x24c <__itoa_ncheck+0x12>
 240:	99 23       	and	r25, r25
 242:	22 f4       	brpl	.+8      	; 0x24c <__itoa_ncheck+0x12>
 244:	bd e2       	ldi	r27, 0x2D	; 45
 246:	90 95       	com	r25
 248:	81 95       	neg	r24
 24a:	9f 4f       	sbci	r25, 0xFF	; 255
 24c:	0c 94 29 01 	jmp	0x252	; 0x252 <__utoa_common>

00000250 <__utoa_ncheck>:
 250:	bb 27       	eor	r27, r27

00000252 <__utoa_common>:
 252:	fb 01       	movw	r30, r22
 254:	55 27       	eor	r21, r21
 256:	aa 27       	eor	r26, r26
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	aa 1f       	adc	r26, r26
 25e:	a4 17       	cp	r26, r20
 260:	10 f0       	brcs	.+4      	; 0x266 <__utoa_common+0x14>
 262:	a4 1b       	sub	r26, r20
 264:	83 95       	inc	r24
 266:	50 51       	subi	r21, 0x10	; 16
 268:	b9 f7       	brne	.-18     	; 0x258 <__utoa_common+0x6>
 26a:	a0 5d       	subi	r26, 0xD0	; 208
 26c:	aa 33       	cpi	r26, 0x3A	; 58
 26e:	08 f0       	brcs	.+2      	; 0x272 <__utoa_common+0x20>
 270:	a9 5d       	subi	r26, 0xD9	; 217
 272:	a1 93       	st	Z+, r26
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	79 f7       	brne	.-34     	; 0x256 <__utoa_common+0x4>
 278:	b1 11       	cpse	r27, r1
 27a:	b1 93       	st	Z+, r27
 27c:	11 92       	st	Z+, r1
 27e:	cb 01       	movw	r24, r22
 280:	0c 94 42 01 	jmp	0x284	; 0x284 <strrev>

00000284 <strrev>:
 284:	dc 01       	movw	r26, r24
 286:	fc 01       	movw	r30, r24
 288:	67 2f       	mov	r22, r23
 28a:	71 91       	ld	r23, Z+
 28c:	77 23       	and	r23, r23
 28e:	e1 f7       	brne	.-8      	; 0x288 <strrev+0x4>
 290:	32 97       	sbiw	r30, 0x02	; 2
 292:	04 c0       	rjmp	.+8      	; 0x29c <strrev+0x18>
 294:	7c 91       	ld	r23, X
 296:	6d 93       	st	X+, r22
 298:	70 83       	st	Z, r23
 29a:	62 91       	ld	r22, -Z
 29c:	ae 17       	cp	r26, r30
 29e:	bf 07       	cpc	r27, r31
 2a0:	c8 f3       	brcs	.-14     	; 0x294 <strrev+0x10>
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
