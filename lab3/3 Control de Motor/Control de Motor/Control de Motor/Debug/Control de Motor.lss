
Control de Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000382  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc0  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044b  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000393  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  8e:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
#define KP_DEN         4       // ajustar (1/4 => suave; bajar DEN para más “fuerza”)
#define ADC_AVG_N      4       // promedio móvil (n muestras)

/* ==== UART (115200-8N1) para telemetría ==== */
static void uart_init(uint16_t ubrr) {
	UBRR0H = (uint8_t)(ubrr >> 8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr & 0xFF);
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <uart_putc>:
}
static void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <uart_putc>
	UDR0 = c;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b8:	08 95       	ret

000000ba <uart_print>:
}
static void uart_print(const char *s) { while (*s) uart_putc(*s++); }
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <uart_print+0xe>
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
  c8:	88 81       	ld	r24, Y
  ca:	81 11       	cpse	r24, r1
  cc:	fa cf       	rjmp	.-12     	; 0xc2 <uart_print+0x8>
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <adc_init>:
	char buf[12]; itoa(v, buf, 10); uart_print(buf);
}

/* ==== ADC ==== */
static void adc_init(void) {
	ADMUX  = (1 << REFS0);                 // AVcc como referencia
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)                  // habilitar ADC
  da:	86 e8       	ldi	r24, 0x86	; 134
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	08 95       	ret

000000e2 <adc_read>:
	| (1 << ADPS2) | (1 << ADPS1); // prescaler 64 - 250 kHz
}
static uint16_t adc_read(uint8_t ch) {
	ADMUX = (ADMUX & 0xF0) | (ch & 0x0F);
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fe:	86 fd       	sbrc	r24, 6
 100:	fc cf       	rjmp	.-8      	; 0xfa <adc_read+0x18>
	return ADC; // 10 bits
 102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 106:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 10a:	08 95       	ret

0000010c <adc_read_avg>:
static uint16_t adc_read_avg(uint8_t ch, uint8_t n) {
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	18 2f       	mov	r17, r24
 11c:	d6 2f       	mov	r29, r22
	uint32_t acc = 0;
	for (uint8_t i=0; i<n; i++) acc += adc_read(ch);
 11e:	c0 e0       	ldi	r28, 0x00	; 0
	ADCSRA |= (1 << ADSC);
	while (ADCSRA & (1 << ADSC));
	return ADC; // 10 bits
}
static uint16_t adc_read_avg(uint8_t ch, uint8_t n) {
	uint32_t acc = 0;
 120:	c1 2c       	mov	r12, r1
 122:	d1 2c       	mov	r13, r1
 124:	76 01       	movw	r14, r12
	for (uint8_t i=0; i<n; i++) acc += adc_read(ch);
 126:	08 c0       	rjmp	.+16     	; 0x138 <adc_read_avg+0x2c>
 128:	81 2f       	mov	r24, r17
 12a:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_read>
 12e:	c8 0e       	add	r12, r24
 130:	d9 1e       	adc	r13, r25
 132:	e1 1c       	adc	r14, r1
 134:	f1 1c       	adc	r15, r1
 136:	cf 5f       	subi	r28, 0xFF	; 255
 138:	cd 17       	cp	r28, r29
 13a:	b0 f3       	brcs	.-20     	; 0x128 <adc_read_avg+0x1c>
	return (uint16_t)(acc / n);
 13c:	2d 2f       	mov	r18, r29
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	c7 01       	movw	r24, r14
 146:	b6 01       	movw	r22, r12
 148:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodsi4>
}
 14c:	c9 01       	movw	r24, r18
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	08 95       	ret

0000015e <pwm_init_oc1a_fast8_presc1>:

/* ==== PWM Timer1 en D9 (OC1A) ==== */
static void pwm_init_oc1a_fast8_presc1(void) {
	DDRB  |= (1 << PIN_PWM_OC1A);                // D9 salida
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	82 60       	ori	r24, 0x02	; 2
 162:	84 b9       	out	0x04, r24	; 4
	// Fast PWM 8-bit: WGM10=1, WGM12=1; salida no invertida en OC1A
	TCCR1A = (1 << WGM10) | (1 << COM1A1);
 164:	81 e8       	ldi	r24, 0x81	; 129
 166:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10);        // prescaler=1 - aprox. 62.5 kHz
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 0;
 170:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 174:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 178:	08 95       	ret

0000017a <uart_print_int>:
static void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = c;
}
static void uart_print(const char *s) { while (*s) uart_putc(*s++); }
static void uart_print_int(int v) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	2c 97       	sbiw	r28, 0x0c	; 12
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18e:	4a e0       	ldi	r20, 0x0A	; 10
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	0e 94 8a 01 	call	0x314	; 0x314 <__itoa_ncheck>
	char buf[12]; itoa(v, buf, 10); uart_print(buf);
 19a:	ce 01       	movw	r24, r28
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	0e 94 5d 00 	call	0xba	; 0xba <uart_print>
}
 1a2:	2c 96       	adiw	r28, 0x0c	; 12
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <main>:
}

/* ==== Main ==== */
int main(void) {
	// LEDs como salida
	DDRD |= (1 << LED_DIR_FWD) | (1 << LED_DIR_REV);
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	80 63       	ori	r24, 0x30	; 48
 1b8:	8a b9       	out	0x0a, r24	; 10
	OCR1A = 0;
}

/* ==== LEDs dirección ==== */
static inline void dir_leds_stop(void){
	PORTD &= ~(1 << LED_DIR_FWD);
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << LED_DIR_REV);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	8b b9       	out	0x0b, r24	; 11
int main(void) {
	// LEDs como salida
	DDRD |= (1 << LED_DIR_FWD) | (1 << LED_DIR_REV);
	dir_leds_stop();

	adc_init();
 1c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_init>
	pwm_init_oc1a_fast8_presc1();
 1ca:	0e 94 af 00 	call	0x15e	; 0x15e <pwm_init_oc1a_fast8_presc1>

	// UART 115200 bps (UBRR = F_CPU/(16*BAUD) - 1 => 16e6/(16*115200)-1 - 8)
	uart_init(8);
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uart_print("P3C,ref,act,pwm,dir\r\n");
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 5d 00 	call	0xba	; 0xba <uart_print>

	while (1) {
		// Lecturas filtradas
		uint16_t ref = adc_read_avg(0, ADC_AVG_N); // A0
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 86 00 	call	0x10c	; 0x10c <adc_read_avg>
 1e6:	8c 01       	movw	r16, r24
		uint16_t act = adc_read_avg(1, ADC_AVG_N); // A1
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 86 00 	call	0x10c	; 0x10c <adc_read_avg>
 1f0:	ec 01       	movw	r28, r24

		// Control proporcional + zona muerta
		int16_t e   = (int16_t)ref - (int16_t)act;
 1f2:	c8 01       	movw	r24, r16
 1f4:	8c 1b       	sub	r24, r28
 1f6:	9d 0b       	sbc	r25, r29
		uint16_t mag = (e >= 0) ? e : -e;
 1f8:	9c 01       	movw	r18, r24
 1fa:	22 f4       	brpl	.+8      	; 0x204 <main+0x50>
 1fc:	22 27       	eor	r18, r18
 1fe:	33 27       	eor	r19, r19
 200:	28 1b       	sub	r18, r24
 202:	39 0b       	sbc	r19, r25

		uint8_t pwm = 0;
		const char *dir_str = "STOP";

		if (mag <= DEAD_ADC) {
 204:	2b 30       	cpi	r18, 0x0B	; 11
 206:	31 05       	cpc	r19, r1
 208:	90 f4       	brcc	.+36     	; 0x22e <main+0x7a>
			// dentro de la banda: freno virtual (sin puente H real)
			OCR1A = 0;
 20a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1A = 0;
}

/* ==== LEDs dirección ==== */
static inline void dir_leds_stop(void){
	PORTD &= ~(1 << LED_DIR_FWD);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8f 7e       	andi	r24, 0xEF	; 239
 216:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << LED_DIR_REV);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8f 7d       	andi	r24, 0xDF	; 223
 21c:	8b b9       	out	0x0b, r24	; 11
		// Control proporcional + zona muerta
		int16_t e   = (int16_t)ref - (int16_t)act;
		uint16_t mag = (e >= 0) ? e : -e;

		uint8_t pwm = 0;
		const char *dir_str = "STOP";
 21e:	0f 2e       	mov	r0, r31
 220:	f8 e0       	ldi	r31, 0x08	; 8
 222:	ef 2e       	mov	r14, r31
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	ff 2e       	mov	r15, r31
 228:	f0 2d       	mov	r31, r0

		// Control proporcional + zona muerta
		int16_t e   = (int16_t)ref - (int16_t)act;
		uint16_t mag = (e >= 0) ? e : -e;

		uint8_t pwm = 0;
 22a:	d1 2c       	mov	r13, r1
 22c:	2e c0       	rjmp	.+92     	; 0x28a <main+0xd6>
			// dentro de la banda: freno virtual (sin puente H real)
			OCR1A = 0;
			dir_leds_stop();
			} else {
			// magnitud proporcional (saturada)
			uint16_t inc = (mag * KP_NUM) / KP_DEN;
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
			uint16_t raw = MIN_PWM + inc;
 236:	28 58       	subi	r18, 0x88	; 136
 238:	3f 4f       	sbci	r19, 0xFF	; 255
			if (raw > 255) raw = 255;
 23a:	2f 3f       	cpi	r18, 0xFF	; 255
 23c:	31 05       	cpc	r19, r1
 23e:	19 f0       	breq	.+6      	; 0x246 <main+0x92>
 240:	10 f0       	brcs	.+4      	; 0x246 <main+0x92>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	30 e0       	ldi	r19, 0x00	; 0
			pwm = (uint8_t)raw;
 246:	d2 2e       	mov	r13, r18

			if (e > 0) {         // ref > act ? “FWD”
 248:	18 16       	cp	r1, r24
 24a:	19 06       	cpc	r1, r25
 24c:	6c f4       	brge	.+26     	; 0x268 <main+0xb4>
static inline void dir_leds_stop(void){
	PORTD &= ~(1 << LED_DIR_FWD);
	PORTD &= ~(1 << LED_DIR_REV);
}
static inline void dir_leds_fwd(void){
	PORTD |=  (1 << LED_DIR_FWD);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 61       	ori	r24, 0x10	; 16
 252:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << LED_DIR_REV);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 7d       	andi	r24, 0xDF	; 223
 258:	8b b9       	out	0x0b, r24	; 11
			if (raw > 255) raw = 255;
			pwm = (uint8_t)raw;

			if (e > 0) {         // ref > act ? “FWD”
				dir_leds_fwd();
				dir_str = "FWD";
 25a:	0f 2e       	mov	r0, r31
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ef 2e       	mov	r14, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	ff 2e       	mov	r15, r31
 264:	f0 2d       	mov	r31, r0
 266:	0c c0       	rjmp	.+24     	; 0x280 <main+0xcc>
static inline void dir_leds_fwd(void){
	PORTD |=  (1 << LED_DIR_FWD);
	PORTD &= ~(1 << LED_DIR_REV);
}
static inline void dir_leds_rev(void){
	PORTD &= ~(1 << LED_DIR_FWD);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	8f 7e       	andi	r24, 0xEF	; 239
 26c:	8b b9       	out	0x0b, r24	; 11
	PORTD |=  (1 << LED_DIR_REV);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	80 62       	ori	r24, 0x20	; 32
 272:	8b b9       	out	0x0b, r24	; 11
			if (e > 0) {         // ref > act ? “FWD”
				dir_leds_fwd();
				dir_str = "FWD";
				} else {              // ref < act ? “REV”
				dir_leds_rev();
				dir_str = "REV";
 274:	0f 2e       	mov	r0, r31
 276:	f4 e0       	ldi	r31, 0x04	; 4
 278:	ef 2e       	mov	r14, r31
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	ff 2e       	mov	r15, r31
 27e:	f0 2d       	mov	r31, r0
 280:	33 27       	eor	r19, r19
			}
			OCR1A = pwm;          // velocidad
 282:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 286:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}

		// Telemetría para gráfica
		
		uart_print_int(ref); uart_putc(',');
 28a:	c8 01       	movw	r24, r16
 28c:	0e 94 bd 00 	call	0x17a	; 0x17a <uart_print_int>
 290:	8c e2       	ldi	r24, 0x2C	; 44
 292:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
		uart_print_int(act); uart_putc(',');
 296:	ce 01       	movw	r24, r28
 298:	0e 94 bd 00 	call	0x17a	; 0x17a <uart_print_int>
 29c:	8c e2       	ldi	r24, 0x2C	; 44
 29e:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
		uart_print_int(pwm); uart_putc(',');
 2a2:	8d 2d       	mov	r24, r13
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 bd 00 	call	0x17a	; 0x17a <uart_print_int>
 2aa:	8c e2       	ldi	r24, 0x2C	; 44
 2ac:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
		uart_print(dir_str); uart_putc('\r'); uart_putc('\n');
 2b0:	c7 01       	movw	r24, r14
 2b2:	0e 94 5d 00 	call	0xba	; 0xba <uart_print>
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	0e 94 56 00 	call	0xac	; 0xac <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x112>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x118>
 2cc:	00 00       	nop
 2ce:	87 cf       	rjmp	.-242    	; 0x1de <main+0x2a>

000002d0 <__udivmodsi4>:
 2d0:	a1 e2       	ldi	r26, 0x21	; 33
 2d2:	1a 2e       	mov	r1, r26
 2d4:	aa 1b       	sub	r26, r26
 2d6:	bb 1b       	sub	r27, r27
 2d8:	fd 01       	movw	r30, r26
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <__udivmodsi4_ep>

000002dc <__udivmodsi4_loop>:
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	ee 1f       	adc	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	a2 17       	cp	r26, r18
 2e6:	b3 07       	cpc	r27, r19
 2e8:	e4 07       	cpc	r30, r20
 2ea:	f5 07       	cpc	r31, r21
 2ec:	20 f0       	brcs	.+8      	; 0x2f6 <__udivmodsi4_ep>
 2ee:	a2 1b       	sub	r26, r18
 2f0:	b3 0b       	sbc	r27, r19
 2f2:	e4 0b       	sbc	r30, r20
 2f4:	f5 0b       	sbc	r31, r21

000002f6 <__udivmodsi4_ep>:
 2f6:	66 1f       	adc	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	1a 94       	dec	r1
 300:	69 f7       	brne	.-38     	; 0x2dc <__udivmodsi4_loop>
 302:	60 95       	com	r22
 304:	70 95       	com	r23
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	9b 01       	movw	r18, r22
 30c:	ac 01       	movw	r20, r24
 30e:	bd 01       	movw	r22, r26
 310:	cf 01       	movw	r24, r30
 312:	08 95       	ret

00000314 <__itoa_ncheck>:
 314:	bb 27       	eor	r27, r27
 316:	4a 30       	cpi	r20, 0x0A	; 10
 318:	31 f4       	brne	.+12     	; 0x326 <__itoa_ncheck+0x12>
 31a:	99 23       	and	r25, r25
 31c:	22 f4       	brpl	.+8      	; 0x326 <__itoa_ncheck+0x12>
 31e:	bd e2       	ldi	r27, 0x2D	; 45
 320:	90 95       	com	r25
 322:	81 95       	neg	r24
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	0c 94 96 01 	jmp	0x32c	; 0x32c <__utoa_common>

0000032a <__utoa_ncheck>:
 32a:	bb 27       	eor	r27, r27

0000032c <__utoa_common>:
 32c:	fb 01       	movw	r30, r22
 32e:	55 27       	eor	r21, r21
 330:	aa 27       	eor	r26, r26
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	aa 1f       	adc	r26, r26
 338:	a4 17       	cp	r26, r20
 33a:	10 f0       	brcs	.+4      	; 0x340 <__utoa_common+0x14>
 33c:	a4 1b       	sub	r26, r20
 33e:	83 95       	inc	r24
 340:	50 51       	subi	r21, 0x10	; 16
 342:	b9 f7       	brne	.-18     	; 0x332 <__utoa_common+0x6>
 344:	a0 5d       	subi	r26, 0xD0	; 208
 346:	aa 33       	cpi	r26, 0x3A	; 58
 348:	08 f0       	brcs	.+2      	; 0x34c <__utoa_common+0x20>
 34a:	a9 5d       	subi	r26, 0xD9	; 217
 34c:	a1 93       	st	Z+, r26
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	79 f7       	brne	.-34     	; 0x330 <__utoa_common+0x4>
 352:	b1 11       	cpse	r27, r1
 354:	b1 93       	st	Z+, r27
 356:	11 92       	st	Z+, r1
 358:	cb 01       	movw	r24, r22
 35a:	0c 94 af 01 	jmp	0x35e	; 0x35e <strrev>

0000035e <strrev>:
 35e:	dc 01       	movw	r26, r24
 360:	fc 01       	movw	r30, r24
 362:	67 2f       	mov	r22, r23
 364:	71 91       	ld	r23, Z+
 366:	77 23       	and	r23, r23
 368:	e1 f7       	brne	.-8      	; 0x362 <strrev+0x4>
 36a:	32 97       	sbiw	r30, 0x02	; 2
 36c:	04 c0       	rjmp	.+8      	; 0x376 <strrev+0x18>
 36e:	7c 91       	ld	r23, X
 370:	6d 93       	st	X+, r22
 372:	70 83       	st	Z, r23
 374:	62 91       	ld	r22, -Z
 376:	ae 17       	cp	r26, r30
 378:	bf 07       	cpc	r27, r31
 37a:	c8 f3       	brcs	.-14     	; 0x36e <strrev+0x10>
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
