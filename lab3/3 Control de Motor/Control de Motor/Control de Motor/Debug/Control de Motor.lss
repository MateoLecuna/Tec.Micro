
Control de Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098d  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c1  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  0000149a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8e:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init_baud>:
#include <stdlib.h>

/* ==== UART ==== */
#define BAUD 115200
static void uart_init_baud(void){
	UCSR0A = (1 << U2X0);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	uint16_t ubrr = (uint16_t)(F_CPU / (8UL * BAUD) - 1UL);
	UBRR0H = (uint8_t)(ubrr >> 8);
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr & 0xFF);
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b2:	08 95       	ret

000000b4 <uart_putc>:
}
static void uart_putc(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c; }
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putc>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <uart_print>:
static void uart_print(const char *s){ while(*s) uart_putc(*s++); }
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <uart_print+0xe>
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
  d0:	88 81       	ld	r24, Y
  d2:	81 11       	cpse	r24, r1
  d4:	fa cf       	rjmp	.-12     	; 0xca <uart_print+0x8>
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <adc_init>:
static void uart_print_int(int v){ char b[12]; itoa(v,b,10); uart_print(b); }

/* ==== ADC ==== */
static void adc_init(void){
	ADMUX=(1<<REFS0);
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	08 95       	ret

000000ea <pwm_init_oc1a_fast8_presc1>:
}

/* ==== PWM (Timer1 OC1A = D9) ==== */
#define PIN_PWM_OC1A PB1
static void pwm_init_oc1a_fast8_presc1(void){
	DDRB |= (1 << PIN_PWM_OC1A);
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << WGM10) | (1 << COM1A1); // FastPWM 8-bit, no invertido
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS10);   // prescaler=1 (~62.5kHz)
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 0;
  fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 100:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 104:	08 95       	ret

00000106 <uart_print_int>:
	UCSR0B = (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}
static void uart_putc(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c; }
static void uart_print(const char *s){ while(*s) uart_putc(*s++); }
static void uart_print_int(int v){ char b[12]; itoa(v,b,10); uart_print(b); }
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	2c 97       	sbiw	r28, 0x0c	; 12
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	be 01       	movw	r22, r28
 11e:	6f 5f       	subi	r22, 0xFF	; 255
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	0e 94 c6 00 	call	0x18c	; 0x18c <__itoa_ncheck>
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
 12e:	2c 96       	adiw	r28, 0x0c	; 12
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <main>:
#define MIN_PWM   120
#define ADC_AVG_N 4
#define TS_MS     50

int main(void){
	uart_init_baud();
 140:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init_baud>
	adc_init();
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_init>
	pwm_init_oc1a_fast8_presc1();
 148:	0e 94 75 00 	call	0xea	; 0xea <pwm_init_oc1a_fast8_presc1>

	uart_print("P3C,PWM fijo MIN_PWM\r\n");
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
	OCR1A = MIN_PWM;
 154:	88 e7       	ldi	r24, 0x78	; 120
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	while(1){
		// solo reporte para verificar que el loop corre
		uart_print("pwm,"); uart_print_int(MIN_PWM); uart_print("\r\n");
 160:	87 e1       	ldi	r24, 0x17	; 23
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 83 00 	call	0x106	; 0x106 <uart_print_int>
 170:	84 e1       	ldi	r24, 0x14	; 20
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x3e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x48>
 188:	00 00       	nop
 18a:	ea cf       	rjmp	.-44     	; 0x160 <main+0x20>

0000018c <__itoa_ncheck>:
 18c:	bb 27       	eor	r27, r27
 18e:	4a 30       	cpi	r20, 0x0A	; 10
 190:	31 f4       	brne	.+12     	; 0x19e <__itoa_ncheck+0x12>
 192:	99 23       	and	r25, r25
 194:	22 f4       	brpl	.+8      	; 0x19e <__itoa_ncheck+0x12>
 196:	bd e2       	ldi	r27, 0x2D	; 45
 198:	90 95       	com	r25
 19a:	81 95       	neg	r24
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__utoa_common>

000001a2 <__utoa_ncheck>:
 1a2:	bb 27       	eor	r27, r27

000001a4 <__utoa_common>:
 1a4:	fb 01       	movw	r30, r22
 1a6:	55 27       	eor	r21, r21
 1a8:	aa 27       	eor	r26, r26
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	aa 1f       	adc	r26, r26
 1b0:	a4 17       	cp	r26, r20
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <__utoa_common+0x14>
 1b4:	a4 1b       	sub	r26, r20
 1b6:	83 95       	inc	r24
 1b8:	50 51       	subi	r21, 0x10	; 16
 1ba:	b9 f7       	brne	.-18     	; 0x1aa <__utoa_common+0x6>
 1bc:	a0 5d       	subi	r26, 0xD0	; 208
 1be:	aa 33       	cpi	r26, 0x3A	; 58
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <__utoa_common+0x20>
 1c2:	a9 5d       	subi	r26, 0xD9	; 217
 1c4:	a1 93       	st	Z+, r26
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	79 f7       	brne	.-34     	; 0x1a8 <__utoa_common+0x4>
 1ca:	b1 11       	cpse	r27, r1
 1cc:	b1 93       	st	Z+, r27
 1ce:	11 92       	st	Z+, r1
 1d0:	cb 01       	movw	r24, r22
 1d2:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <strrev>

000001d6 <strrev>:
 1d6:	dc 01       	movw	r26, r24
 1d8:	fc 01       	movw	r30, r24
 1da:	67 2f       	mov	r22, r23
 1dc:	71 91       	ld	r23, Z+
 1de:	77 23       	and	r23, r23
 1e0:	e1 f7       	brne	.-8      	; 0x1da <strrev+0x4>
 1e2:	32 97       	sbiw	r30, 0x02	; 2
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <strrev+0x18>
 1e6:	7c 91       	ld	r23, X
 1e8:	6d 93       	st	X+, r22
 1ea:	70 83       	st	Z, r23
 1ec:	62 91       	ld	r22, -Z
 1ee:	ae 17       	cp	r26, r30
 1f0:	bf 07       	cpc	r27, r31
 1f2:	c8 f3       	brcs	.-14     	; 0x1e6 <strrev+0x10>
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
