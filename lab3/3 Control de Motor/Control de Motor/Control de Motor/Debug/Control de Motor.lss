
Control de Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d8  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b5  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8e:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init_baud>:
#include <util/delay.h>

/* ==== UART 115200-8N1 con U2X ==== */
#define BAUD 115200
static void uart_init_baud(void) {
	UCSR0A = (1 << U2X0); // doble velocidad
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	uint16_t ubrr = (uint16_t)(F_CPU / (8UL * BAUD) - 1UL);
	UBRR0H = (uint8_t)(ubrr >> 8);
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr & 0xFF);
  a0:	80 e1       	ldi	r24, 0x10	; 16
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0);
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8N1
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b2:	08 95       	ret

000000b4 <uart_putc>:
}
static void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putc>
	UDR0 = c;
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <uart_print>:
}
static void uart_print(const char *s) { while (*s) uart_putc(*s++); }
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <uart_print+0xe>
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_putc>
  d0:	88 81       	ld	r24, Y
  d2:	81 11       	cpse	r24, r1
  d4:	fa cf       	rjmp	.-12     	; 0xca <uart_print+0x8>
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:

int main(void) {
	uart_init_baud();
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init_baud>
	uart_print("P3C init: UART OK @115200\r\n");
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
	while (1) {
		uart_print("ping\r\n");
  e8:	8c e1       	ldi	r24, 0x1C	; 28
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x1a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x24>
 100:	00 00       	nop
 102:	f2 cf       	rjmp	.-28     	; 0xe8 <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
