
HC-SR04 - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000179  00000000  00000000  00001b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  78:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm0_init>:
#define DMAX_CM 50     // >= DMAX -> brillo mín
#define INVERT_BRIGHTNESS 0 // 0: cerca = brillo alto, 1: lejos = brillo alto

// PWM en Timer0, OC0A (D6)
static void pwm0_init(void) {
    DDRD |= (1 << LED_PWM_PIN);  // D6 salida
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
    // Fast PWM 8-bit, no invertido en OC0A
    TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	84 bd       	out	0x24, r24	; 36
    // Prescaler = 64 -> ~976 Hz (flicker-free para LED)
    TCCR0B = (1 << CS01) | (1 << CS00);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0; // duty inicial
  8e:	17 bc       	out	0x27, r1	; 39
  90:	08 95       	ret

00000092 <hcsr04_init>:
}

// HC-SR04: TRIG/ECHO
static void hcsr04_init(void) {
    DDRD |=  (1 << TRIG_PIN);   // TRIG salida
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << ECHO_PIN);   // ECHO entrada
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << TRIG_PIN);  // TRIG en 0
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	8b b9       	out	0x0b, r24	; 11
  a4:	08 95       	ret

000000a6 <timer1_init>:

// Timer1 para medir ECHO
// Prescaler = 8 -> 0.5 us por tick (16 MHz / 8)

static void timer1_init(void) {
    TCCR1A = 0x00;
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << CS11);   // prescaler 8
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0x00;
  b0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  b4:	08 95       	ret

000000b6 <distance_to_duty>:
    return (int16_t)cm;
}

// Mapear distancia a duty (0..255) con saturación
static uint8_t distance_to_duty(uint16_t cm) {
    if (cm <= DMIN_CM) {
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	98 f0       	brcs	.+38     	; 0xe2 <distance_to_duty+0x2c>
        return 0;
#else
        return 255;
#endif
    }
    if (cm >= DMAX_CM) {
  bc:	82 33       	cpi	r24, 0x32	; 50
  be:	91 05       	cpc	r25, r1
  c0:	90 f4       	brcc	.+36     	; 0xe6 <distance_to_duty+0x30>
    }
    uint32_t num;
#if INVERT_BRIGHTNESS
    num = (uint32_t)(cm - DMIN_CM) * 255u;
#else
    num = (uint32_t)(DMAX_CM - cm) * 255u;
  c2:	22 e3       	ldi	r18, 0x32	; 50
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	28 1b       	sub	r18, r24
  c8:	39 0b       	sbc	r19, r25
  ca:	af ef       	ldi	r26, 0xFF	; 255
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__umulhisi3>
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
  d2:	2d e2       	ldi	r18, 0x2D	; 45
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodsi4>
  de:	82 2f       	mov	r24, r18
  e0:	08 95       	ret
static uint8_t distance_to_duty(uint16_t cm) {
    if (cm <= DMIN_CM) {
#if INVERT_BRIGHTNESS
        return 0;
#else
        return 255;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	08 95       	ret
    }
    if (cm >= DMAX_CM) {
#if INVERT_BRIGHTNESS
        return 255;
#else
        return 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
    num = (uint32_t)(cm - DMIN_CM) * 255u;
#else
    num = (uint32_t)(DMAX_CM - cm) * 255u;
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
}
  e8:	08 95       	ret

000000ea <hcsr04_read_cm>:
}

// Lee una medición en cm, retorna -1 si hay timeout
static int16_t hcsr04_read_cm(void) {
    // Pulso TRIG de 10 us
    PORTD &= ~(1 << TRIG_PIN);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2a e0       	ldi	r18, 0x0A	; 10
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <hcsr04_read_cm+0x8>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <hcsr04_read_cm+0xe>
    _delay_us(2);
    PORTD |=  (1 << TRIG_PIN);
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	85 e3       	ldi	r24, 0x35	; 53
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <hcsr04_read_cm+0x16>
 104:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << TRIG_PIN);
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 77       	andi	r24, 0x7F	; 127
 10a:	8b b9       	out	0x0b, r24	; 11

    // Empezamos a contar
    TCNT1 = 0;
 10c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 110:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
 114:	07 c0       	rjmp	.+14     	; 0x124 <hcsr04_read_cm+0x3a>
        if (TCNT1 > 60000) return -1;
 116:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 11a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11e:	81 36       	cpi	r24, 0x61	; 97
 120:	9a 4e       	sbci	r25, 0xEA	; 234
 122:	08 f5       	brcc	.+66     	; 0x166 <hcsr04_read_cm+0x7c>

    // Empezamos a contar
    TCNT1 = 0;

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
 124:	4a 9b       	sbis	0x09, 2	; 9
 126:	f7 cf       	rjmp	.-18     	; 0x116 <hcsr04_read_cm+0x2c>
        if (TCNT1 > 60000) return -1;
    }

    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;
 128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
 130:	07 c0       	rjmp	.+14     	; 0x140 <hcsr04_read_cm+0x56>
        if (TCNT1 > 60000) return -1;
 132:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 136:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13a:	81 36       	cpi	r24, 0x61	; 97
 13c:	9a 4e       	sbci	r25, 0xEA	; 234
 13e:	b0 f4       	brcc	.+44     	; 0x16c <hcsr04_read_cm+0x82>

    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
 140:	4a 99       	sbic	0x09, 2	; 9
 142:	f7 cf       	rjmp	.-18     	; 0x132 <hcsr04_read_cm+0x48>
        if (TCNT1 > 60000) return -1;
    }

    uint16_t ticks = TCNT1;          // ticks de 0.5 us
 144:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 148:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    uint16_t cm = (uint16_t)(ticks / 116); // (ticks*0.5us)/58us/cm = ticks/116
 14c:	af e9       	ldi	r26, 0x9F	; 159
 14e:	b6 e4       	ldi	r27, 0x46	; 70
 150:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__umulhisi3>
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	92 95       	swap	r25
 15a:	82 95       	swap	r24
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	89 27       	eor	r24, r25
 160:	9f 70       	andi	r25, 0x0F	; 15
 162:	89 27       	eor	r24, r25
    return (int16_t)cm;
 164:	08 95       	ret
    // Empezamos a contar
    TCNT1 = 0;

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
        if (TCNT1 > 60000) return -1;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	08 95       	ret
    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
        if (TCNT1 > 60000) return -1;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f ef       	ldi	r25, 0xFF	; 255
    }

    uint16_t ticks = TCNT1;          // ticks de 0.5 us
    uint16_t cm = (uint16_t)(ticks / 116); // (ticks*0.5us)/58us/cm = ticks/116
    return (int16_t)cm;
}
 170:	08 95       	ret

00000172 <main>:
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
}

int main(void) {
    pwm0_init();
 172:	0e 94 40 00 	call	0x80	; 0x80 <pwm0_init>
    hcsr04_init();
 176:	0e 94 49 00 	call	0x92	; 0x92 <hcsr04_init>
    timer1_init();
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <timer1_init>

    while (1) {
        int16_t cm = hcsr04_read_cm();
 17e:	0e 94 75 00 	call	0xea	; 0xea <hcsr04_read_cm>
        if (cm >= 0) {
 182:	99 23       	and	r25, r25
 184:	24 f0       	brlt	.+8      	; 0x18e <main+0x1c>
            OCR0A = distance_to_duty((uint16_t)cm);
 186:	0e 94 5b 00 	call	0xb6	; 0xb6 <distance_to_duty>
 18a:	87 bd       	out	0x27, r24	; 39
 18c:	01 c0       	rjmp	.+2      	; 0x190 <main+0x1e>
        } else {
            // Sin lectura -> LED apagado
            OCR0A = 0;
 18e:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	8d ee       	ldi	r24, 0xED	; 237
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x24>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x2e>
 1a0:	00 00       	nop
 1a2:	ed cf       	rjmp	.-38     	; 0x17e <main+0xc>

000001a4 <__udivmodsi4>:
 1a4:	a1 e2       	ldi	r26, 0x21	; 33
 1a6:	1a 2e       	mov	r1, r26
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	fd 01       	movw	r30, r26
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <__udivmodsi4_ep>

000001b0 <__udivmodsi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	ee 1f       	adc	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	e4 07       	cpc	r30, r20
 1be:	f5 07       	cpc	r31, r21
 1c0:	20 f0       	brcs	.+8      	; 0x1ca <__udivmodsi4_ep>
 1c2:	a2 1b       	sub	r26, r18
 1c4:	b3 0b       	sbc	r27, r19
 1c6:	e4 0b       	sbc	r30, r20
 1c8:	f5 0b       	sbc	r31, r21

000001ca <__udivmodsi4_ep>:
 1ca:	66 1f       	adc	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	1a 94       	dec	r1
 1d4:	69 f7       	brne	.-38     	; 0x1b0 <__udivmodsi4_loop>
 1d6:	60 95       	com	r22
 1d8:	70 95       	com	r23
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	bd 01       	movw	r22, r26
 1e4:	cf 01       	movw	r24, r30
 1e6:	08 95       	ret

000001e8 <__umulhisi3>:
 1e8:	a2 9f       	mul	r26, r18
 1ea:	b0 01       	movw	r22, r0
 1ec:	b3 9f       	mul	r27, r19
 1ee:	c0 01       	movw	r24, r0
 1f0:	a3 9f       	mul	r26, r19
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	b2 9f       	mul	r27, r18
 1fc:	70 0d       	add	r23, r0
 1fe:	81 1d       	adc	r24, r1
 200:	11 24       	eor	r1, r1
 202:	91 1d       	adc	r25, r1
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
