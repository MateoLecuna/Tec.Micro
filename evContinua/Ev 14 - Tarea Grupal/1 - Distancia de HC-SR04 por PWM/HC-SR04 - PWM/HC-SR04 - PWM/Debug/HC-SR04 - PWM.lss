
HC-SR04 - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000728  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  00001b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  78:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm0_init>:
#define DMAX_CM 400    // >= DMAX -> brillo mín
#define INVERT_BRIGHTNESS 0 // 0: cerca = brillo alto, 1: lejos = brillo alto

// PWM en Timer0, OC0A (D6)
static void pwm0_init(void) {
    DDRD |= (1 << LED_PWM_PIN);  // D6 salida
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
    // Fast PWM 8-bit, no invertido en OC0A
    TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	84 bd       	out	0x24, r24	; 36
    // Prescaler = 64 -> ~976 Hz (flicker-free para LED)
    TCCR0B = (1 << CS01) | (1 << CS00);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0; // duty inicial
  8e:	17 bc       	out	0x27, r1	; 39
  90:	08 95       	ret

00000092 <hcsr04_init>:
}

// HC-SR04: TRIG/ECHO
static void hcsr04_init(void) {
    DDRD |=  (1 << TRIG_PIN);   // TRIG salida
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << ECHO_PIN);   // ECHO entrada
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << TRIG_PIN);  // TRIG en 0
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	8b b9       	out	0x0b, r24	; 11
  a4:	08 95       	ret

000000a6 <timer1_init>:

// Timer1 para medir ECHO
// Prescaler = 8 -> 0.5 us por tick (16 MHz / 8)

static void timer1_init(void) {
    TCCR1A = 0x00;
  a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << CS11);   // prescaler 8
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0x00;
  b0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  b4:	08 95       	ret

000000b6 <distance_to_duty>:
    return (int16_t)cm;
}

// Mapear distancia a duty (0..255) con saturación
static uint8_t distance_to_duty(uint16_t cm) {
    if (cm <= DMIN_CM) {
  b6:	86 30       	cpi	r24, 0x06	; 6
  b8:	91 05       	cpc	r25, r1
  ba:	a0 f0       	brcs	.+40     	; 0xe4 <distance_to_duty+0x2e>
        return 0;
#else
        return 255;
#endif
    }
    if (cm >= DMAX_CM) {
  bc:	80 39       	cpi	r24, 0x90	; 144
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	92 07       	cpc	r25, r18
  c2:	90 f4       	brcc	.+36     	; 0xe8 <distance_to_duty+0x32>
    }
    uint32_t num;
#if INVERT_BRIGHTNESS
    num = (uint32_t)(cm - DMIN_CM) * 255u;
#else
    num = (uint32_t)(DMAX_CM - cm) * 255u;
  c4:	20 e9       	ldi	r18, 0x90	; 144
  c6:	31 e0       	ldi	r19, 0x01	; 1
  c8:	28 1b       	sub	r18, r24
  ca:	39 0b       	sbc	r19, r25
  cc:	af ef       	ldi	r26, 0xFF	; 255
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__umulhisi3>
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
  d4:	2b e8       	ldi	r18, 0x8B	; 139
  d6:	31 e0       	ldi	r19, 0x01	; 1
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__udivmodsi4>
  e0:	82 2f       	mov	r24, r18
  e2:	08 95       	ret
static uint8_t distance_to_duty(uint16_t cm) {
    if (cm <= DMIN_CM) {
#if INVERT_BRIGHTNESS
        return 0;
#else
        return 255;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	08 95       	ret
    }
    if (cm >= DMAX_CM) {
#if INVERT_BRIGHTNESS
        return 255;
#else
        return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
    num = (uint32_t)(cm - DMIN_CM) * 255u;
#else
    num = (uint32_t)(DMAX_CM - cm) * 255u;
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
}
  ea:	08 95       	ret

000000ec <hcsr04_read_cm>:
}

// Lee una medición en cm, retorna -1 si hay timeout
static int16_t hcsr04_read_cm(void) {
    // Pulso TRIG de 10 us
    PORTD &= ~(1 << TRIG_PIN);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	2a 95       	dec	r18
  f6:	f1 f7       	brne	.-4      	; 0xf4 <hcsr04_read_cm+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <hcsr04_read_cm+0xe>
    _delay_us(2);
    PORTD |=  (1 << TRIG_PIN);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <hcsr04_read_cm+0x16>
 106:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << TRIG_PIN);
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	8b b9       	out	0x0b, r24	; 11

    // Empezamos a contar
    TCNT1 = 0;
 10e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 112:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
 116:	07 c0       	rjmp	.+14     	; 0x126 <hcsr04_read_cm+0x3a>
        if (TCNT1 > 60000) return -1;
 118:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 11c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 120:	81 36       	cpi	r24, 0x61	; 97
 122:	9a 4e       	sbci	r25, 0xEA	; 234
 124:	08 f5       	brcc	.+66     	; 0x168 <hcsr04_read_cm+0x7c>

    // Empezamos a contar
    TCNT1 = 0;

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
 126:	4a 9b       	sbis	0x09, 2	; 9
 128:	f7 cf       	rjmp	.-18     	; 0x118 <hcsr04_read_cm+0x2c>
        if (TCNT1 > 60000) return -1;
    }

    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
 132:	07 c0       	rjmp	.+14     	; 0x142 <hcsr04_read_cm+0x56>
        if (TCNT1 > 60000) return -1;
 134:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 138:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13c:	81 36       	cpi	r24, 0x61	; 97
 13e:	9a 4e       	sbci	r25, 0xEA	; 234
 140:	b0 f4       	brcc	.+44     	; 0x16e <hcsr04_read_cm+0x82>

    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
 142:	4a 99       	sbic	0x09, 2	; 9
 144:	f7 cf       	rjmp	.-18     	; 0x134 <hcsr04_read_cm+0x48>
        if (TCNT1 > 60000) return -1;
    }

    uint16_t ticks = TCNT1;          // ticks de 0.5 us
 146:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 14a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    uint16_t cm = (uint16_t)(ticks / 116); // (ticks*0.5us)/58us/cm = ticks/116
 14e:	af e9       	ldi	r26, 0x9F	; 159
 150:	b6 e4       	ldi	r27, 0x46	; 70
 152:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__umulhisi3>
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	92 95       	swap	r25
 15c:	82 95       	swap	r24
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	89 27       	eor	r24, r25
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	89 27       	eor	r24, r25
    return (int16_t)cm;
 166:	08 95       	ret
    // Empezamos a contar
    TCNT1 = 0;

    // Esperar flanco de subida en ECHO (timeout ~30 ms)
    while (!(PIND & (1 << ECHO_PIN))) {
        if (TCNT1 > 60000) return -1;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	08 95       	ret
    // Reiniciar conteo en flanco de subida
    TCNT1 = 0;

    // Esperar flanco de bajada (timeout ~30 ms)
    while (PIND & (1 << ECHO_PIN)) {
        if (TCNT1 > 60000) return -1;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f ef       	ldi	r25, 0xFF	; 255
    }

    uint16_t ticks = TCNT1;          // ticks de 0.5 us
    uint16_t cm = (uint16_t)(ticks / 116); // (ticks*0.5us)/58us/cm = ticks/116
    return (int16_t)cm;
}
 172:	08 95       	ret

00000174 <main>:
#endif
    return (uint8_t)(num / (DMAX_CM - DMIN_CM));
}

int main(void) {
    pwm0_init();
 174:	0e 94 40 00 	call	0x80	; 0x80 <pwm0_init>
    hcsr04_init();
 178:	0e 94 49 00 	call	0x92	; 0x92 <hcsr04_init>
    timer1_init();
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <timer1_init>

    while (1) {
        int16_t cm = hcsr04_read_cm();
 180:	0e 94 76 00 	call	0xec	; 0xec <hcsr04_read_cm>
        if (cm >= 0) {
 184:	99 23       	and	r25, r25
 186:	24 f0       	brlt	.+8      	; 0x190 <main+0x1c>
            OCR0A = distance_to_duty((uint16_t)cm);
 188:	0e 94 5b 00 	call	0xb6	; 0xb6 <distance_to_duty>
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	01 c0       	rjmp	.+2      	; 0x192 <main+0x1e>
        } else {
            // Sin lectura -> LED apagado
            OCR0A = 0;
 190:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	8d ee       	ldi	r24, 0xED	; 237
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x24>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x2e>
 1a2:	00 00       	nop
 1a4:	ed cf       	rjmp	.-38     	; 0x180 <main+0xc>

000001a6 <__udivmodsi4>:
 1a6:	a1 e2       	ldi	r26, 0x21	; 33
 1a8:	1a 2e       	mov	r1, r26
 1aa:	aa 1b       	sub	r26, r26
 1ac:	bb 1b       	sub	r27, r27
 1ae:	fd 01       	movw	r30, r26
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <__udivmodsi4_ep>

000001b2 <__udivmodsi4_loop>:
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	ee 1f       	adc	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	a2 17       	cp	r26, r18
 1bc:	b3 07       	cpc	r27, r19
 1be:	e4 07       	cpc	r30, r20
 1c0:	f5 07       	cpc	r31, r21
 1c2:	20 f0       	brcs	.+8      	; 0x1cc <__udivmodsi4_ep>
 1c4:	a2 1b       	sub	r26, r18
 1c6:	b3 0b       	sbc	r27, r19
 1c8:	e4 0b       	sbc	r30, r20
 1ca:	f5 0b       	sbc	r31, r21

000001cc <__udivmodsi4_ep>:
 1cc:	66 1f       	adc	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	1a 94       	dec	r1
 1d6:	69 f7       	brne	.-38     	; 0x1b2 <__udivmodsi4_loop>
 1d8:	60 95       	com	r22
 1da:	70 95       	com	r23
 1dc:	80 95       	com	r24
 1de:	90 95       	com	r25
 1e0:	9b 01       	movw	r18, r22
 1e2:	ac 01       	movw	r20, r24
 1e4:	bd 01       	movw	r22, r26
 1e6:	cf 01       	movw	r24, r30
 1e8:	08 95       	ret

000001ea <__umulhisi3>:
 1ea:	a2 9f       	mul	r26, r18
 1ec:	b0 01       	movw	r22, r0
 1ee:	b3 9f       	mul	r27, r19
 1f0:	c0 01       	movw	r24, r0
 1f2:	a3 9f       	mul	r26, r19
 1f4:	70 0d       	add	r23, r0
 1f6:	81 1d       	adc	r24, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	91 1d       	adc	r25, r1
 1fc:	b2 9f       	mul	r27, r18
 1fe:	70 0d       	add	r23, r0
 200:	81 1d       	adc	r24, r1
 202:	11 24       	eor	r1, r1
 204:	91 1d       	adc	r25, r1
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
