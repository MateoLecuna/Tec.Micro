
LCD - Teclado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000035c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e26  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000587  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060c  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  8e:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <kpd_init>:
}

// Implementación Teclado
static void kpd_init(void) {
    // Filas PC0..PC3 como salidas (inician en alto)
    DDRC |= 0x0F;
  96:	87 b1       	in	r24, 0x07	; 7
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	87 b9       	out	0x07, r24	; 7
    PORTC |= 0x0F;
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	88 b9       	out	0x08, r24	; 8

    // Columnas PB0..PB3 como entradas con pull-up
    DDRB &= ~0x0F;
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	84 b9       	out	0x04, r24	; 4
    PORTB |= 0x0F;
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8f 60       	ori	r24, 0x0F	; 15
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	08 95       	ret

000000b0 <keymap>:
        {'1','2','3','A'},
        {'4','5','6','B'},
        {'7','8','9','C'},
        {'*','0','#','D'}
    };
    if (r<4 && c<4) return tbl[r][c];
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	70 f4       	brcc	.+28     	; 0xd0 <keymap+0x20>
  b4:	64 30       	cpi	r22, 0x04	; 4
  b6:	70 f4       	brcc	.+28     	; 0xd4 <keymap+0x24>
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	e9 5f       	subi	r30, 0xF9	; 249
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	e6 0f       	add	r30, r22
  ca:	f1 1d       	adc	r31, r1
  cc:	80 81       	ld	r24, Z
  ce:	08 95       	ret
    return '\0';
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
  d4:	80 e0       	ldi	r24, 0x00	; 0
}
  d6:	08 95       	ret

000000d8 <lcd_pulse_enable>:
static char kpd_getkey(void);     // devuelve '\0' si no hay tecla
static char keymap(uint8_t r, uint8_t c);

// Implementación LCD
static void lcd_pulse_enable(void) {
    SETBIT(PORTD, LCD_E);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_pulse_enable+0x8>
  e4:	00 00       	nop
    _delay_us(1);
    CLRBIT(PORTD, LCD_E);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	87 7f       	andi	r24, 0xF7	; 247
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	87 ec       	ldi	r24, 0xC7	; 199
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_pulse_enable+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_pulse_enable+0x1e>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <lcd_write_nibble>:
    _delay_us(50);
}

static void lcd_write_nibble(uint8_t nib) {
    // Poner D4..D7 según nibble (bits 0..3)
    if (nib & 0x01) SETBIT(PORTD, LCD_D4); else CLRBIT(PORTD, LCD_D4);
  fa:	80 ff       	sbrs	r24, 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <lcd_write_nibble+0xc>
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	90 61       	ori	r25, 0x10	; 16
 102:	9b b9       	out	0x0b, r25	; 11
 104:	03 c0       	rjmp	.+6      	; 0x10c <lcd_write_nibble+0x12>
 106:	9b b1       	in	r25, 0x0b	; 11
 108:	9f 7e       	andi	r25, 0xEF	; 239
 10a:	9b b9       	out	0x0b, r25	; 11
    if (nib & 0x02) SETBIT(PORTD, LCD_D5); else CLRBIT(PORTD, LCD_D5);
 10c:	81 ff       	sbrs	r24, 1
 10e:	04 c0       	rjmp	.+8      	; 0x118 <lcd_write_nibble+0x1e>
 110:	9b b1       	in	r25, 0x0b	; 11
 112:	90 62       	ori	r25, 0x20	; 32
 114:	9b b9       	out	0x0b, r25	; 11
 116:	03 c0       	rjmp	.+6      	; 0x11e <lcd_write_nibble+0x24>
 118:	9b b1       	in	r25, 0x0b	; 11
 11a:	9f 7d       	andi	r25, 0xDF	; 223
 11c:	9b b9       	out	0x0b, r25	; 11
    if (nib & 0x04) SETBIT(PORTD, LCD_D6); else CLRBIT(PORTD, LCD_D6);
 11e:	82 ff       	sbrs	r24, 2
 120:	04 c0       	rjmp	.+8      	; 0x12a <lcd_write_nibble+0x30>
 122:	9b b1       	in	r25, 0x0b	; 11
 124:	90 64       	ori	r25, 0x40	; 64
 126:	9b b9       	out	0x0b, r25	; 11
 128:	03 c0       	rjmp	.+6      	; 0x130 <lcd_write_nibble+0x36>
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	9f 7b       	andi	r25, 0xBF	; 191
 12e:	9b b9       	out	0x0b, r25	; 11
    if (nib & 0x08) SETBIT(PORTD, LCD_D7); else CLRBIT(PORTD, LCD_D7);
 130:	83 ff       	sbrs	r24, 3
 132:	04 c0       	rjmp	.+8      	; 0x13c <lcd_write_nibble+0x42>
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	03 c0       	rjmp	.+6      	; 0x142 <lcd_write_nibble+0x48>
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8f 77       	andi	r24, 0x7F	; 127
 140:	8b b9       	out	0x0b, r24	; 11
    lcd_pulse_enable();
 142:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_pulse_enable>
 146:	08 95       	ret

00000148 <lcd_write_byte>:
}

static void lcd_write_byte(uint8_t data, uint8_t is_data) {
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
    if (is_data) SETBIT(PORTD, LCD_RS); else CLRBIT(PORTD, LCD_RS);
 14c:	66 23       	and	r22, r22
 14e:	21 f0       	breq	.+8      	; 0x158 <lcd_write_byte+0x10>
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	84 60       	ori	r24, 0x04	; 4
 154:	8b b9       	out	0x0b, r24	; 11
 156:	03 c0       	rjmp	.+6      	; 0x15e <lcd_write_byte+0x16>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	8b b9       	out	0x0b, r24	; 11
    lcd_write_nibble(data >> 4);
 15e:	8c 2f       	mov	r24, r28
 160:	82 95       	swap	r24
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>
    lcd_write_nibble(data & 0x0F);
 168:	8c 2f       	mov	r24, r28
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>
}
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_data>:
    lcd_write_byte(cmd, 0);
    if (cmd == 0x01 || cmd == 0x02) _delay_ms(2);
}

static void lcd_data(uint8_t data) {
    lcd_write_byte(data, 1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_write_byte>
 17a:	08 95       	ret

0000017c <lcd_puts>:
static void lcd_gotoxy(uint8_t col, uint8_t row) {
    static const uint8_t base[2] = {0x00, 0x40}; // 16x2
    lcd_cmd(0x80 | (base[row & 1] + (col & 0x0F)));
}

static void lcd_puts(const char *s) {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
    while (*s) lcd_data((uint8_t)*s++);
 182:	03 c0       	rjmp	.+6      	; 0x18a <lcd_puts+0xe>
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_data>
 18a:	88 81       	ld	r24, Y
 18c:	81 11       	cpse	r24, r1
 18e:	fa cf       	rjmp	.-12     	; 0x184 <lcd_puts+0x8>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_cmd>:
    if (is_data) SETBIT(PORTD, LCD_RS); else CLRBIT(PORTD, LCD_RS);
    lcd_write_nibble(data >> 4);
    lcd_write_nibble(data & 0x0F);
}

static void lcd_cmd(uint8_t cmd) {
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
    lcd_write_byte(cmd, 0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_write_byte>
    if (cmd == 0x01 || cmd == 0x02) _delay_ms(2);
 1a0:	c1 50       	subi	r28, 0x01	; 1
 1a2:	c2 30       	cpi	r28, 0x02	; 2
 1a4:	30 f4       	brcc	.+12     	; 0x1b2 <lcd_cmd+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_cmd+0x14>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_cmd+0x1a>
 1b0:	00 00       	nop
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_gotoxy>:
    lcd_cmd(0x01);
}

static void lcd_gotoxy(uint8_t col, uint8_t row) {
    static const uint8_t base[2] = {0x00, 0x40}; // 16x2
    lcd_cmd(0x80 | (base[row & 1] + (col & 0x0F)));
 1b6:	26 2f       	mov	r18, r22
 1b8:	21 70       	andi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	e9 5e       	subi	r30, 0xE9	; 233
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	90 81       	ld	r25, Z
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	89 0f       	add	r24, r25
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
 1ce:	08 95       	ret

000001d0 <lcd_init>:
    lcd_write_byte(data, 1);
}

static void lcd_init(void) {
    // Configurar pines como salida
    DDRD |= (1<<LCD_RS) | (1<<LCD_E) | (1<<LCD_D4) | (1<<LCD_D5) | (1<<LCD_D6) | (1<<LCD_D7);
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	8c 6f       	ori	r24, 0xFC	; 252
 1d4:	8a b9       	out	0x0a, r24	; 10
    // Estado inicial
    CLRBIT(PORTD, LCD_RS);
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8b 7f       	andi	r24, 0xFB	; 251
 1da:	8b b9       	out	0x0b, r24	; 11
    CLRBIT(PORTD, LCD_E);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	87 7f       	andi	r24, 0xF7	; 247
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	83 ef       	ldi	r24, 0xF3	; 243
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <lcd_init+0x18>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x22>
 1f2:	00 00       	nop

    _delay_ms(40); // power-up

    // Init especial 4-bit
    lcd_write_nibble(0x03); _delay_ms(5);
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>
 1fa:	8f e1       	ldi	r24, 0x1F	; 31
 1fc:	9e e4       	ldi	r25, 0x4E	; 78
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x2e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x34>
 204:	00 00       	nop
    lcd_write_nibble(0x03); _delay_us(150);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	87 e5       	ldi	r24, 0x57	; 87
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x40>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x46>
 216:	00 00       	nop
    lcd_write_nibble(0x03); _delay_us(150);
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>
 21e:	87 e5       	ldi	r24, 0x57	; 87
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x52>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x58>
 228:	00 00       	nop
    lcd_write_nibble(0x02); // 4-bit
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_write_nibble>

    // Función: 4-bit, 2 líneas, 5x8
    lcd_cmd(0x28);
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
    // Display ON, cursor OFF, blink OFF
    lcd_cmd(0x0C);
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
    // Entry mode: cursor incrementa
    lcd_cmd(0x06);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
    // Clear
    lcd_cmd(0x01);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
 248:	08 95       	ret

0000024a <kpd_getkey>:
    };
    if (r<4 && c<4) return tbl[r][c];
    return '\0';
}

static char kpd_getkey(void) {
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
    // Escaneo por filas: poner una fila a 0, leer columnas
    for (uint8_t r = 0; r < 4; r++) {
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	49 c0       	rjmp	.+146    	; 0x2e4 <kpd_getkey+0x9a>
        // Poner todas las filas en 1
        PORTC |= 0x0F;
 252:	98 b1       	in	r25, 0x08	; 8
 254:	9f 60       	ori	r25, 0x0F	; 15
 256:	98 b9       	out	0x08, r25	; 8
        // Activar fila r en 0
        CLRBIT(PORTC, r);
 258:	98 b1       	in	r25, 0x08	; 8
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	08 2e       	mov	r0, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <kpd_getkey+0x1c>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <kpd_getkey+0x18>
 26a:	20 95       	com	r18
 26c:	29 23       	and	r18, r25
 26e:	28 b9       	out	0x08, r18	; 8
 270:	2a e1       	ldi	r18, 0x1A	; 26
 272:	2a 95       	dec	r18
 274:	f1 f7       	brne	.-4      	; 0x272 <kpd_getkey+0x28>
 276:	00 c0       	rjmp	.+0      	; 0x278 <kpd_getkey+0x2e>

        _delay_us(5);
		
        uint8_t cols = PINB & 0x0F; // columnas con pull-up
 278:	93 b1       	in	r25, 0x03	; 3
 27a:	9f 70       	andi	r25, 0x0F	; 15
        if (cols != 0x0F) {
 27c:	9f 30       	cpi	r25, 0x0F	; 15
 27e:	89 f1       	breq	.+98     	; 0x2e2 <kpd_getkey+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	99 ef       	ldi	r25, 0xF9	; 249
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	31 50       	subi	r19, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e0 40       	sbci	r30, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <kpd_getkey+0x3c>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <kpd_getkey+0x46>
 290:	00 00       	nop
            // Alguna columna fue tirada a 0 -> hay tecla
            _delay_ms(20); // debounce
            cols = PINB & 0x0F;
 292:	93 b1       	in	r25, 0x03	; 3
 294:	9f 70       	andi	r25, 0x0F	; 15
            if (cols != 0x0F) {
 296:	9f 30       	cpi	r25, 0x0F	; 15
 298:	09 f5       	brne	.+66     	; 0x2dc <kpd_getkey+0x92>
 29a:	23 c0       	rjmp	.+70     	; 0x2e2 <kpd_getkey+0x98>
                // Identificar columna
                for (uint8_t c = 0; c < 4; c++) {
                    if ((cols & (1<<c)) == 0) {
 29c:	c6 2f       	mov	r28, r22
 29e:	29 2f       	mov	r18, r25
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	06 2e       	mov	r0, r22
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <kpd_getkey+0x60>
 2a6:	35 95       	asr	r19
 2a8:	27 95       	ror	r18
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <kpd_getkey+0x5c>
 2ae:	20 fd       	sbrc	r18, 0
 2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <kpd_getkey+0x8e>
                        char ch = keymap(r, c);
 2b2:	0e 94 58 00 	call	0xb0	; 0xb0 <keymap>
                        // Esperar liberación para no repetir
                        while ((PINB & (1<<c)) == 0) { /* wait */ }
 2b6:	23 b1       	in	r18, 0x03	; 3
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	0c 2e       	mov	r0, r28
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <kpd_getkey+0x78>
 2be:	35 95       	asr	r19
 2c0:	27 95       	ror	r18
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <kpd_getkey+0x74>
 2c6:	20 ff       	sbrs	r18, 0
 2c8:	f6 cf       	rjmp	.-20     	; 0x2b6 <kpd_getkey+0x6c>
 2ca:	ef e3       	ldi	r30, 0x3F	; 63
 2cc:	fc e9       	ldi	r31, 0x9C	; 156
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <kpd_getkey+0x84>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <kpd_getkey+0x8a>
 2d4:	00 00       	nop
                        _delay_ms(10);
                        return ch;
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <kpd_getkey+0xa2>
            // Alguna columna fue tirada a 0 -> hay tecla
            _delay_ms(20); // debounce
            cols = PINB & 0x0F;
            if (cols != 0x0F) {
                // Identificar columna
                for (uint8_t c = 0; c < 4; c++) {
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	01 c0       	rjmp	.+2      	; 0x2de <kpd_getkey+0x94>
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	64 30       	cpi	r22, 0x04	; 4
 2e0:	e8 f2       	brcs	.-70     	; 0x29c <kpd_getkey+0x52>
    return '\0';
}

static char kpd_getkey(void) {
    // Escaneo por filas: poner una fila a 0, leer columnas
    for (uint8_t r = 0; r < 4; r++) {
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <kpd_getkey+0xa0>
 2e8:	b4 cf       	rjmp	.-152    	; 0x252 <kpd_getkey+0x8>
                    }
                }
            }
        }
    }
    return '\0'; // sin tecla
 2ea:	80 e0       	ldi	r24, 0x00	; 0
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <main>:
	
int main(void) {
    lcd_init();
 2f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
    kpd_init();
 2f6:	0e 94 4b 00 	call	0x96	; 0x96 <kpd_init>
	
	lcd_gotoxy(0,0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_gotoxy>
    lcd_puts("Tecla:");
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
    lcd_gotoxy(0,1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_gotoxy>
    lcd_puts("");
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>

    while (1) {
        char k = kpd_getkey();
 31a:	0e 94 25 01 	call	0x24a	; 0x24a <kpd_getkey>
        if (k != '\0') {
 31e:	88 23       	and	r24, r24
 320:	a1 f0       	breq	.+40     	; 0x34a <main+0x58>
            lcd_data((uint8_t)k);   // muestra la tecla
 322:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_data>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	86 e1       	ldi	r24, 0x16	; 22
 32a:	91 e1       	ldi	r25, 0x11	; 17
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x3a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x44>
 336:	00 00       	nop
            _delay_ms(350);         // visible 350 ms

            lcd_cmd(0x10);          // cursor a la izquierda
 338:	80 e1       	ldi	r24, 0x10	; 16
 33a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
            lcd_data(' ');          // borra pisando con espacio
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_data>
            lcd_cmd(0x10);          // vuelve a la posición original
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_cmd>
 34a:	8f e1       	ldi	r24, 0x1F	; 31
 34c:	9e e4       	ldi	r25, 0x4E	; 78
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x5c>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x62>
 354:	00 00       	nop
 356:	e1 cf       	rjmp	.-62     	; 0x31a <main+0x28>

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
