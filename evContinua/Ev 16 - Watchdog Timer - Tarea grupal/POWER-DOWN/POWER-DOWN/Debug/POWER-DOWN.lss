
POWER-DOWN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007be  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070f  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_6>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <wdt_enable_interrupt_1s>:
	LED_PORT |= LED_MASK;
}

// WDT: interrupción aprox. 1 s (WDP2|WDP1)
static void wdt_enable_interrupt_1s(void){
	cli();
  90:	f8 94       	cli
	MCUSR &= ~(1<<WDRF);                 // limpia flag WDT reset
  92:	84 b7       	in	r24, 0x34	; 52
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);      // ventana de cambio
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	88 61       	ori	r24, 0x18	; 24
  a0:	80 83       	st	Z, r24
		// WDIE=1 (solo interrupción), WDE=0; prescaler aprox. 1 s => WDP2|WDP1
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1); // aprox. 1 s
  a2:	86 e4       	ldi	r24, 0x46	; 70
  a4:	80 83       	st	Z, r24
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <wdt_disable_all>:
}

static void wdt_disable_all(void){
	cli();
  aa:	f8 94       	cli
	WDTCSR |= (1<<WDCE) | (1<<WDE);
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
	WDTCSR = 0x00;
  b6:	10 82       	st	Z, r1
	sei();
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <sleep_powerdown_ticks>:
}

static void sleep_powerdown_ticks(uint8_t ticks){
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
	wdt_ticks = 0;
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	wdt_enable_interrupt_1s();
  c4:	0e 94 48 00 	call	0x90	; 0x90 <wdt_enable_interrupt_1s>

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	81 7f       	andi	r24, 0xF1	; 241
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	83 bf       	out	0x33, r24	; 51
	while (wdt_ticks < ticks) {
  d0:	08 c0       	rjmp	.+16     	; 0xe2 <sleep_powerdown_ticks+0x26>
		sleep_enable();
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	83 bf       	out	0x33, r24	; 51
		sei();
  d8:	78 94       	sei
		sleep_cpu();   // despierta por WDT
  da:	88 95       	sleep
		sleep_disable();
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	83 bf       	out	0x33, r24	; 51
static void sleep_powerdown_ticks(uint8_t ticks){
	wdt_ticks = 0;
	wdt_enable_interrupt_1s();

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	while (wdt_ticks < ticks) {
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	8c 17       	cp	r24, r28
  e8:	a0 f3       	brcs	.-24     	; 0xd2 <sleep_powerdown_ticks+0x16>
		sei();
		sleep_cpu();   // despierta por WDT
		sleep_disable();
	}

	wdt_disable_all();
  ea:	0e 94 55 00 	call	0xaa	; 0xaa <wdt_disable_all>
}
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <__vector_6>:
#define LED_MASK  ((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6))

volatile uint8_t wdt_ticks = 0;

// ISR WDT: cuenta “ticks” (aprox. 1 s por tick si WDP2|WDP1)
ISR(WDT_vect) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	if (wdt_ticks < 255) wdt_ticks++;
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	29 f0       	breq	.+10     	; 0x110 <__vector_6+0x1e>
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

// LEDs siempre encendidos
static inline void leds_setup_on(void){
	LED_DDR  |= LED_MASK;
 11c:	8a b1       	in	r24, 0x0a	; 10
 11e:	8c 67       	ori	r24, 0x7C	; 124
 120:	8a b9       	out	0x0a, r24	; 10
	LED_PORT |= LED_MASK;
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	8c 67       	ori	r24, 0x7C	; 124
 126:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	8b e7       	ldi	r24, 0x7B	; 123
 12c:	92 e9       	ldi	r25, 0x92	; 146
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x12>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x1c>
 138:	00 00       	nop
int main(void){
	leds_setup_on();

	while (1) {
		_delay_ms(ACTIVE_MS);               // CPU despierta, LEDs ON
		sleep_powerdown_ticks(SLEEP_TICKS); // CPU en POWER-DOWN, LEDs ON
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 5e 00 	call	0xbc	; 0xbc <sleep_powerdown_ticks>
 140:	f3 cf       	rjmp	.-26     	; 0x128 <main+0xc>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
